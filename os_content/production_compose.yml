version: '3.8'

services:
  # Main application
  os-content-app:
    build:
      context: .
      dockerfile: production_dockerfile
    container_name: os-content-production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - MAX_WORKERS=8
      - ENABLE_GPU=false
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - os-content-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: os-content-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - os-content-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: os-content-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: os_content
      POSTGRES_USER: os_content_user
      POSTGRES_PASSWORD: os_content_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - os-content-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U os_content_user -d os_content"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: os-content-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - os-content-app
    networks:
      - os-content-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: os-content-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - os-content-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: os-content-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - os-content-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: os-content-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - os-content-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: os-content-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - os-content-network

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: os-content-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/os-content:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - os-content-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: os-content-backup
    restart: "no"
    volumes:
      - ./backup:/backup
      - postgres_data:/var/lib/postgresql/data:ro
      - redis_data:/data:ro
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=os_content
      - POSTGRES_USER=os_content_user
      - POSTGRES_PASSWORD=os_content_password
    command: |
      sh -c "
        apk add --no-cache postgresql-client
        pg_dump -h postgres -U os_content_user -d os_content > /backup/db_$(date +%Y%m%d_%H%M%S).sql
        redis-cli -h redis --rdb /backup/redis_$(date +%Y%m%d_%H%M%S).rdb
      "
    depends_on:
      - postgres
      - redis
    networks:
      - os-content-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  os-content-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 