version: '3.8'

services:
  # Main application
  os-content-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: os-content:latest
    container_name: os-content-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://os_content_user:${DB_PASSWORD}@postgres:5432/os_content
      - REDIS_URL=redis://redis:6379/0
      - CDN_URL=${CDN_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT=100
      - RATE_LIMIT_WINDOW=60
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=info
      - WORKERS=4
      - MAX_CONCURRENT_TASKS=50
      - MAX_FILE_SIZE=524288000
      - UPLOAD_DIR=/var/lib/os_content/uploads
      - BACKUP_ENABLED=true
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - os_content_uploads:/var/lib/os_content/uploads
      - os_content_logs:/var/log/os_content
      - os_content_cache:/var/cache/os_content
      - os_content_backups:/var/backups/os_content
    depends_on:
      - postgres
      - redis
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: os-content-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=os_content
      - POSTGRES_USER=os_content_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U os_content_user -d os_content"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: os-content-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: os-content-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - os_content_uploads:/var/lib/os_content/uploads:ro
    depends_on:
      - os-content-api
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: os-content-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: os-content-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - os_content_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: os-content-backup
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - os_content_backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - postgres
    networks:
      - os_content_network
    command: ["sh", "/backup.sh"]
    profiles:
      - backup

  # Maintenance Service
  maintenance:
    image: os-content:latest
    container_name: os-content-maintenance
    restart: "no"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://os_content_user:${DB_PASSWORD}@postgres:5432/os_content
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - os_content_uploads:/var/lib/os_content/uploads
      - os_content_logs:/var/log/os_content
    depends_on:
      - postgres
      - redis
    networks:
      - os_content_network
    command: ["python", "-c", "from production.maintenance import run_maintenance; import asyncio; asyncio.run(run_maintenance())"]
    profiles:
      - maintenance

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  os_content_uploads:
    driver: local
  os_content_logs:
    driver: local
  os_content_cache:
    driver: local
  os_content_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  os_content_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 