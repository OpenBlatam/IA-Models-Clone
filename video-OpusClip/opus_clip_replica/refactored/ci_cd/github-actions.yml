name: Opus Clip CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r refactored/requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
        
    - name: Code formatting check
      run: |
        black --check refactored/
        
    - name: Linting
      run: |
        flake8 refactored/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 refactored/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking
      run: |
        mypy refactored/ --ignore-missing-imports
        
    - name: Run tests
      run: |
        pytest refactored/testing/test_suite.py -v --cov=refactored --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r refactored/ -f json -o bandit-report.json
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # Build and Push Docker Images
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: refactored/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        kubectl apply -f refactored/kubernetes/opus-clip-deployment.yaml
        kubectl rollout status deployment/opus-clip-api -n opus-clip
        kubectl rollout status deployment/opus-clip-web -n opus-clip
        
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/opus-clip-api -n opus-clip
        kubectl wait --for=condition=available --timeout=300s deployment/opus-clip-web -n opus-clip
        
        # Get service URLs
        API_URL=$(kubectl get service opus-clip-api-service -n opus-clip -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        WEB_URL=$(kubectl get service opus-clip-web-service -n opus-clip -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health checks
        curl -f http://$API_URL:8000/api/health
        curl -f http://$WEB_URL:8080/
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Deploy to Production
  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: Deploy to production
      run: |
        kubectl apply -f refactored/kubernetes/opus-clip-deployment.yaml
        kubectl rollout status deployment/opus-clip-api -n opus-clip
        kubectl rollout status deployment/opus-clip-web -n opus-clip
        
    - name: Run production tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/opus-clip-api -n opus-clip
        kubectl wait --for=condition=available --timeout=600s deployment/opus-clip-web -n opus-clip
        
        # Get service URLs
        API_URL=$(kubectl get service opus-clip-api-service -n opus-clip -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        WEB_URL=$(kubectl get service opus-clip-web-service -n opus-clip -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run comprehensive tests
        curl -f http://$API_URL:8000/api/health
        curl -f http://$WEB_URL:8080/
        
        # Run load tests
        pip install locust
        locust -f refactored/testing/load_tests.py --host=http://$API_URL:8000 --users=10 --spawn-rate=2 --run-time=60s --headless
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Performance Testing
  performance-test:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install locust pytest-benchmark
        
    - name: Run performance tests
      run: |
        # Get staging URL
        STAGING_URL=$(kubectl get service opus-clip-api-service -n opus-clip -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run load tests
        locust -f refactored/testing/load_tests.py --host=http://$STAGING_URL:8000 --users=50 --spawn-rate=5 --run-time=300s --headless --html=performance-report.html
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # Release
  release:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: ${{ github.event.release.name }}
        body: ${{ github.event.release.body }}
        draft: false
        prerelease: false
        
    - name: Notify release
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow


