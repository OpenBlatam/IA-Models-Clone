apiVersion: v1
kind: Namespace
metadata:
  name: opus-clip
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opus-clip-config
  namespace: opus-clip
data:
  OPUS_CLIP_ENV: "production"
  OPUS_CLIP_DB_HOST: "postgres-service"
  OPUS_CLIP_DB_PORT: "5432"
  OPUS_CLIP_DB_NAME: "opus_clip"
  OPUS_CLIP_REDIS_HOST: "redis-service"
  OPUS_CLIP_REDIS_PORT: "6379"
  API_BASE_URL: "http://opus-clip-api-service:8000"
---
apiVersion: v1
kind: Secret
metadata:
  name: opus-clip-secrets
  namespace: opus-clip
type: Opaque
data:
  OPUS_CLIP_DB_PASSWORD: c2VjdXJlX3Bhc3N3b3Jk  # base64 encoded
  OPUS_CLIP_REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # base64 encoded
  OPUS_CLIP_SECRET_KEY: eW91ci1zZWNyZXQta2V5LWhlcmU=  # base64 encoded
  OPUS_CLIP_JWT_SECRET: eW91ci1qd3Qtc2VjcmV0LWhlcmU=  # base64 encoded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opus-clip-api
  namespace: opus-clip
  labels:
    app: opus-clip-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: opus-clip-api
  template:
    metadata:
      labels:
        app: opus-clip-api
    spec:
      containers:
      - name: opus-clip-api
        image: opus-clip:latest
        ports:
        - containerPort: 8000
        env:
        - name: OPUS_CLIP_ENV
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_ENV
        - name: OPUS_CLIP_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_DB_HOST
        - name: OPUS_CLIP_DB_PORT
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_DB_PORT
        - name: OPUS_CLIP_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_DB_NAME
        - name: OPUS_CLIP_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: opus-clip-secrets
              key: OPUS_CLIP_DB_PASSWORD
        - name: OPUS_CLIP_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_REDIS_HOST
        - name: OPUS_CLIP_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_REDIS_PORT
        - name: OPUS_CLIP_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: opus-clip-secrets
              key: OPUS_CLIP_REDIS_PASSWORD
        - name: OPUS_CLIP_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: opus-clip-secrets
              key: OPUS_CLIP_SECRET_KEY
        - name: OPUS_CLIP_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: opus-clip-secrets
              key: OPUS_CLIP_JWT_SECRET
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: opus-clip-uploads-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: opus-clip-logs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: opus-clip-api-service
  namespace: opus-clip
spec:
  selector:
    app: opus-clip-api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opus-clip-web
  namespace: opus-clip
  labels:
    app: opus-clip-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: opus-clip-web
  template:
    metadata:
      labels:
        app: opus-clip-web
    spec:
      containers:
      - name: opus-clip-web
        image: opus-clip:latest
        ports:
        - containerPort: 8080
        env:
        - name: OPUS_CLIP_ENV
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: OPUS_CLIP_ENV
        - name: API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: opus-clip-config
              key: API_BASE_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        command: ["python", "web_interface/modern_web_ui.py"]
---
apiVersion: v1
kind: Service
metadata:
  name: opus-clip-web-service
  namespace: opus-clip
spec:
  selector:
    app: opus-clip-web
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: opus-clip
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "opus_clip"
        - name: POSTGRES_USER
          value: "opusclip"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: opus-clip-secrets
              key: OPUS_CLIP_DB_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: opus-clip
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: opus-clip
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "redis_password"]
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: opus-clip
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: opus-clip-uploads-pvc
  namespace: opus-clip
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: opus-clip-logs-pvc
  namespace: opus-clip
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: opus-clip
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: opus-clip
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opus-clip-ingress
  namespace: opus-clip
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - opus-clip.example.com
    secretName: opus-clip-tls
  rules:
  - host: opus-clip.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: opus-clip-api-service
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: opus-clip-web-service
            port:
              number: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: opus-clip-api-hpa
  namespace: opus-clip
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: opus-clip-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: opus-clip-web-hpa
  namespace: opus-clip
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: opus-clip-web
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80


