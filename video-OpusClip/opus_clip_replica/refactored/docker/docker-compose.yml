version: '3.8'

services:
  # Main Opus Clip API
  opus-clip-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: opus-clip-api
    ports:
      - "8000:8000"
    environment:
      - OPUS_CLIP_ENV=production
      - OPUS_CLIP_DB_HOST=postgres
      - OPUS_CLIP_DB_PORT=5432
      - OPUS_CLIP_DB_NAME=opus_clip
      - OPUS_CLIP_DB_USER=opusclip
      - OPUS_CLIP_DB_PASSWORD=secure_password
      - OPUS_CLIP_REDIS_HOST=redis
      - OPUS_CLIP_REDIS_PORT=6379
      - OPUS_CLIP_REDIS_PASSWORD=redis_password
      - OPUS_CLIP_SECRET_KEY=your-secret-key-here
      - OPUS_CLIP_JWT_SECRET=your-jwt-secret-here
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Web Interface
  opus-clip-web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: opus-clip-web
    ports:
      - "8080:8080"
    environment:
      - OPUS_CLIP_ENV=production
      - API_BASE_URL=http://opus-clip-api:8000
    volumes:
      - static_files:/app/static
      - templates:/app/templates
    depends_on:
      - opus-clip-api
    restart: unless-stopped
    networks:
      - opus-clip-network
    command: ["python", "web_interface/modern_web_ui.py"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: opus-clip-postgres
    environment:
      - POSTGRES_DB=opus_clip
      - POSTGRES_USER=opusclip
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: opus-clip-redis
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: opus-clip-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - opus-clip-api
      - opus-clip-web
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: opus-clip-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: opus-clip-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - opus-clip-network

  # Log Aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: opus-clip-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - opus-clip-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: opus-clip-logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - opus-clip-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: opus-clip-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - opus-clip-network

volumes:
  postgres_data:
  redis_data:
  uploads:
  logs:
  static_files:
  templates:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  opus-clip-network:
    driver: bridge


