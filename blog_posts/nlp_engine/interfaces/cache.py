from typing_extensions import Literal, TypedDict
from typing import Any, List, Dict, Optional, Union, Tuple
from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
from ..core.entities import AnalysisResult
from typing import Any, List, Dict, Optional
import logging
import asyncio
"""
游댋 CACHE INTERFACES - Contratos para Cache y Repositorios
========================================================

Interfaces para sistemas de cache y repositorios de datos.
"""



class ICacheRepository(ABC):
    """Interface para repositorio de cache."""
    
    @abstractmethod
    async def get(self, key: str) -> Optional[AnalysisResult]:
        """
        Obtener resultado del cache.
        
        Args:
            key: Clave del cache
            
        Returns:
            AnalysisResult si existe, None si no
        """
        pass
    
    @abstractmethod
    async def set(
        self, 
        key: str, 
        result: AnalysisResult, 
        ttl: Optional[int] = None
    ) -> None:
        """
        Guardar resultado en cache.
        
        Args:
            key: Clave del cache
            result: Resultado a guardar
            ttl: Tiempo de vida en segundos (opcional)
        """
        pass
    
    @abstractmethod
    async def delete(self, key: str) -> bool:
        """
        Eliminar entrada del cache.
        
        Args:
            key: Clave a eliminar
            
        Returns:
            True si se elimin칩, False si no exist칤a
        """
        pass
    
    @abstractmethod
    async def invalidate_pattern(self, pattern: str) -> int:
        """
        Invalidar keys que coincidan con patr칩n.
        
        Args:
            pattern: Patr칩n para matching (ej: "nlp:*")
            
        Returns:
            N칰mero de keys invalidadas
        """
        pass
    
    @abstractmethod
    async def exists(self, key: str) -> bool:
        """
        Verificar si existe una clave.
        
        Args:
            key: Clave a verificar
            
        Returns:
            True si existe
        """
        pass
    
    @abstractmethod
    def get_stats(self) -> Dict[str, Any]:
        """
        Obtener estad칤sticas del cache.
        
        Returns:
            Diccionario con estad칤sticas
        """
        pass
    
    @abstractmethod
    async def clear(self) -> None:
        """Limpiar completamente el cache."""
        pass
    
    @abstractmethod
    async def health_check(self) -> Dict[str, Any]:
        """
        Verificar salud del cache.
        
        Returns:
            Estado de salud del cache
        """
        pass


class IDistributedCache(ICacheRepository):
    """Interface para cache distribuido."""
    
    @abstractmethod
    async def get_node_info(self) -> Dict[str, Any]:
        """
        Obtener informaci칩n del nodo en cluster.
        
        Returns:
            Informaci칩n del nodo
        """
        pass
    
    @abstractmethod
    async def get_cluster_stats(self) -> Dict[str, Any]:
        """
        Obtener estad칤sticas del cluster.
        
        Returns:
            Estad칤sticas del cluster
        """
        pass
    
    @abstractmethod
    async def replicate_to_nodes(self, key: str, result: AnalysisResult) -> int:
        """
        Replicar datos a otros nodos.
        
        Args:
            key: Clave a replicar
            result: Resultado a replicar
            
        Returns:
            N칰mero de nodos que recibieron la r칠plica
        """
        pass


class ICacheKeyGenerator(ABC):
    """Interface para generaci칩n de claves de cache."""
    
    @abstractmethod
    def generate_key(
        self, 
        text_hash: str, 
        analysis_types: List[str], 
        tier: str,
        **kwargs
    ) -> str:
        """
        Generar clave determin칤stica para cache.
        
        Args:
            text_hash: Hash del texto
            analysis_types: Tipos de an치lisis
            tier: Tier de procesamiento
            **kwargs: Par치metros adicionales
            
        Returns:
            Clave de cache 칰nica
        """
        pass
    
    @abstractmethod
    def extract_components(self, key: str) -> Dict[str, Any]:
        """
        Extraer componentes de una clave de cache.
        
        Args:
            key: Clave a descomponer
            
        Returns:
            Diccionario con componentes
        """
        pass
    
    @abstractmethod
    def validate_key(self, key: str) -> bool:
        """
        Validar formato de clave.
        
        Args:
            key: Clave a validar
            
        Returns:
            True si es v치lida
        """
        pass


class ICacheEvictionPolicy(ABC):
    """Interface para pol칤ticas de eviction."""
    
    @abstractmethod
    def should_evict(
        self, 
        cache_size: int, 
        max_size: int, 
        access_times: Dict[str, float]
    ) -> List[str]:
        """
        Determinar qu칠 claves evict.
        
        Args:
            cache_size: Tama침o actual del cache
            max_size: Tama침o m치ximo
            access_times: Tiempos de acceso por clave
            
        Returns:
            Lista de claves a evict
        """
        pass
    
    @abstractmethod
    def get_policy_name(self) -> str:
        """
        Obtener nombre de la pol칤tica.
        
        Returns:
            Nombre de la pol칤tica (LRU, LFU, etc.)
        """
        pass


class ICacheSerializer(ABC):
    """Interface para serializaci칩n de cache."""
    
    @abstractmethod
    def serialize(self, result: AnalysisResult) -> bytes:
        """
        Serializar resultado para almacenamiento.
        
        Args:
            result: Resultado a serializar
            
        Returns:
            Datos serializados
        """
        pass
    
    @abstractmethod
    def deserialize(self, data: bytes) -> AnalysisResult:
        """
        Deserializar datos del cache.
        
        Args:
            data: Datos serializados
            
        Returns:
            AnalysisResult deserializado
        """
        pass
    
    @abstractmethod
    def get_format(self) -> str:
        """
        Obtener formato de serializaci칩n.
        
        Returns:
            Formato utilizado (json, pickle, msgpack, etc.)
        """
        pass 