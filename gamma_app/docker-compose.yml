version: '3.8'

# Gamma App - Complete Development and Production Environment
# AI-Powered Content Generation System with Real-time Collaboration

services:
  # Main Application
  gamma_app:
    build:
      context: .
      target: production
    container_name: gamma_app
    ports:
      - "8030:8000"  # Main API
      - "8031:9090"  # Metrics
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://gamma_user:gamma_password@postgres:5432/gamma_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - gamma_uploads:/app/uploads
      - gamma_data:/app/data
      - gamma_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Development Version
  gamma_app_dev:
    build:
      context: .
      target: development
    container_name: gamma_app_dev
    ports:
      - "8032:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://gamma_user:gamma_password@postgres:5432/gamma_db_dev
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
    volumes:
      - gamma_uploads_dev:/app/uploads
      - gamma_data_dev:/app/data
      - ./:/app  # Mount source code for development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gamma_postgres
    environment:
      - POSTGRES_DB=gamma_db
      - POSTGRES_USER=gamma_user
      - POSTGRES_PASSWORD=gamma_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gamma_user -d gamma_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: gamma_redis
    command: redis-server --appendonly yes --requirepass gamma_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gamma_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - gamma_uploads:/var/www/uploads
    depends_on:
      - gamma_app
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gamma_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: gamma_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Background Tasks - Celery Worker
  celery_worker:
    build:
      context: .
      target: production
    container_name: gamma_celery_worker
    command: celery -A api.main.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://gamma_user:gamma_password@postgres:5432/gamma_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - gamma_uploads:/app/uploads
      - gamma_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    profiles:
      - worker

  # Background Tasks - Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      target: production
    container_name: gamma_celery_beat
    command: celery -A api.main.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://gamma_user:gamma_password@postgres:5432/gamma_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - gamma_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - worker

  # AI Model Service (Optional - for local models)
  ai_models:
    image: huggingface/transformers-pytorch-gpu:latest
    container_name: gamma_ai_models
    ports:
      - "8033:8000"
    environment:
      - MODEL_CACHE_DIR=/models
    volumes:
      - ai_models_data:/models
    restart: unless-stopped
    profiles:
      - ai_models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Elasticsearch (Optional - for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: gamma_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    profiles:
      - search

  # Kibana (Optional - for Elasticsearch visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: gamma_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - search

# Networks
networks:
  default:
    name: gamma_network
    driver: bridge

# Volumes
volumes:
  # Application data
  gamma_uploads:
    driver: local
  gamma_data:
    driver: local
  gamma_logs:
    driver: local
  
  # Development data
  gamma_uploads_dev:
    driver: local
  gamma_data_dev:
    driver: local
  
  # Database data
  postgres_data:
    driver: local
  
  # Cache data
  redis_data:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # AI models data
  ai_models_data:
    driver: local
  
  # Search data
  elasticsearch_data:
    driver: local

# Health checks and restart policies
x-restart-policy: &restart-policy
  restart: unless-stopped

x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# Resource limits
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 1G



























