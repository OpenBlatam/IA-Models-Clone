#!/usr/bin/env python3
"""
üîç VERIFICACI√ìN FINAL - SISTEMA DE MEJORAS INTEGRADAS
Verificaci√≥n final completa del sistema
"""

import sys
import os
import time
from datetime import datetime
from pathlib import Path

def print_banner():
    """Imprimir banner del sistema"""
    print("\n" + "=" * 80)
    print("üîç SISTEMA DE MEJORAS INTEGRADAS - VERIFICACI√ìN FINAL")
    print("=" * 80)
    print("Verificaci√≥n final completa del sistema")
    print("=" * 80)

def verificar_archivos_principales():
    """Verificar archivos principales del sistema"""
    print("\nüìÅ Verificando archivos principales...")
    
    archivos_principales = [
        'real_improvements_engine.py',
        'demo_completo_mejoras.py',
        'verificar_instalacion.py',
        'ejecutar_mejoras.py',
        'instalar_sistema.py',
        'configurar_sistema.py',
        'limpiar_sistema.py',
        'inicio_rapido.py',
        'inicio_automatico.py',
        'resumen_final.py',
        'verificar_final.py',
        'requirements.txt',
        'README.md',
        'INICIO_RAPIDO.md'
    ]
    
    archivos_ok = 0
    archivos_faltantes = []
    
    for archivo in archivos_principales:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo} - OK")
            archivos_ok += 1
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            archivos_faltantes.append(archivo)
    
    print(f"\nüìä Resumen de archivos principales:")
    print(f"   ‚úÖ Archivos presentes: {archivos_ok}/{len(archivos_principales)}")
    print(f"   ‚ùå Archivos faltantes: {len(archivos_faltantes)}")
    
    if archivos_faltantes:
        print(f"\n‚ö†Ô∏è Archivos faltantes:")
        for archivo in archivos_faltantes:
            print(f"   - {archivo}")
    
    return len(archivos_faltantes) == 0

def verificar_archivos_demo():
    """Verificar archivos de demo"""
    print("\nüéØ Verificando archivos de demo...")
    
    archivos_demo = [
        'demo_librerias_optimas.py',
        'demo_ml_optimizado.py',
        'demo_nlp_avanzado.py',
        'demo_analisis_predictivo.py',
        'demo_arquitectura_empresarial.py',
        'demo_seguridad_avanzada.py',
        'demo_monitoreo_inteligente.py',
        'demo_analytics_avanzados.py'
    ]
    
    archivos_ok = 0
    archivos_faltantes = []
    
    for archivo in archivos_demo:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo} - OK")
            archivos_ok += 1
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            archivos_faltantes.append(archivo)
    
    print(f"\nüìä Resumen de archivos de demo:")
    print(f"   ‚úÖ Archivos presentes: {archivos_ok}/{len(archivos_demo)}")
    print(f"   ‚ùå Archivos faltantes: {len(archivos_faltantes)}")
    
    if archivos_faltantes:
        print(f"\n‚ö†Ô∏è Archivos faltantes:")
        for archivo in archivos_faltantes:
            print(f"   - {archivo}")
    
    return len(archivos_faltantes) == 0

def verificar_archivos_configuracion():
    """Verificar archivos de configuraci√≥n"""
    print("\n‚öôÔ∏è Verificando archivos de configuraci√≥n...")
    
    archivos_config = [
        'config.json',
        'config_librerias.json',
        'config_dependencias.json',
        'config_ml.json',
        'config_nlp.json',
        'config_seguridad.json',
        'config_monitoreo.json',
        'config.yaml',
        '.env'
    ]
    
    archivos_ok = 0
    archivos_faltantes = []
    
    for archivo in archivos_config:
        if os.path.exists(archivo):
            print(f"   ‚úÖ {archivo} - OK")
            archivos_ok += 1
        else:
            print(f"   ‚ùå {archivo} - FALTANTE")
            archivos_faltantes.append(archivo)
    
    print(f"\nüìä Resumen de archivos de configuraci√≥n:")
    print(f"   ‚úÖ Archivos presentes: {archivos_ok}/{len(archivos_config)}")
    print(f"   ‚ùå Archivos faltantes: {len(archivos_faltantes)}")
    
    if archivos_faltantes:
        print(f"\n‚ö†Ô∏è Archivos faltantes:")
        for archivo in archivos_faltantes:
            print(f"   - {archivo}")
    
    return len(archivos_faltantes) == 0

def verificar_dependencias():
    """Verificar dependencias principales"""
    print("\nüì¶ Verificando dependencias principales...")
    
    dependencias = [
        'numpy', 'pandas', 'scikit-learn', 'tensorflow', 'torch',
        'transformers', 'spacy', 'nltk', 'opencv-python', 'pillow',
        'requests', 'aiohttp', 'fastapi', 'uvicorn', 'sqlalchemy',
        'redis', 'prometheus-client', 'structlog', 'loguru',
        'pytest', 'black', 'flake8', 'mypy', 'click', 'tqdm'
    ]
    
    dependencias_ok = 0
    dependencias_faltantes = []
    
    for dep in dependencias:
        try:
            __import__(dep.replace('-', '_'))
            print(f"   ‚úÖ {dep} - OK")
            dependencias_ok += 1
        except ImportError:
            print(f"   ‚ùå {dep} - FALTANTE")
            dependencias_faltantes.append(dep)
    
    print(f"\nüìä Resumen de dependencias:")
    print(f"   ‚úÖ Dependencias instaladas: {dependencias_ok}/{len(dependencias)}")
    print(f"   ‚ùå Dependencias faltantes: {len(dependencias_faltantes)}")
    
    if dependencias_faltantes:
        print(f"\n‚ö†Ô∏è Dependencias faltantes:")
        for dep in dependencias_faltantes:
            print(f"   - {dep}")
    
    return len(dependencias_faltantes) == 0

def verificar_sistema():
    """Verificar sistema de mejoras"""
    print("\nüîß Verificando sistema de mejoras...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        print("   ‚úÖ RealImprovementsEngine - OK")
        
        # Verificar mejoras
        engine = RealImprovementsEngine()
        engine.create_optimal_libraries_improvements()
        print("   ‚úÖ Mejoras creadas - OK")
        
        # Verificar sistemas espec√≠ficos
        sistemas = [
            'optimal_libraries_system',
            'intelligent_dependencies_system',
            'optimized_ml_system',
            'advanced_nlp_system',
            'advanced_predictive_analytics',
            'enterprise_architecture_system',
            'advanced_security_system',
            'intelligent_monitoring_system'
        ]
        
        sistemas_ok = 0
        for sistema in sistemas:
            if hasattr(engine, sistema):
                print(f"   ‚úÖ {sistema} - OK")
                sistemas_ok += 1
            else:
                print(f"   ‚ùå {sistema} - FALTANTE")
        
        print(f"\nüìä Resumen de sistemas:")
        print(f"   ‚úÖ Sistemas disponibles: {sistemas_ok}/{len(sistemas)}")
        
        return sistemas_ok == len(sistemas)
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar sistema: {e}")
        return False

def verificar_funcionalidades():
    """Verificar funcionalidades principales"""
    print("\nüöÄ Verificando funcionalidades principales...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        engine = RealImprovementsEngine()
        engine.create_optimal_libraries_improvements()
        
        # Verificar funcionalidades
        funcionalidades = [
            ('analyze_current_libraries', 'An√°lisis de librer√≠as'),
            ('optimize_libraries_automatically', 'Optimizaci√≥n autom√°tica'),
            ('analyze_dependencies_intelligently', 'An√°lisis de dependencias'),
            ('analyze_ml_libraries', 'An√°lisis de ML'),
            ('analyze_nlp_libraries', 'An√°lisis de NLP'),
            ('analyze_predictive_libraries', 'An√°lisis predictivo'),
            ('analyze_architecture_libraries', 'An√°lisis de arquitectura'),
            ('analyze_security_libraries', 'An√°lisis de seguridad'),
            ('analyze_monitoring_libraries', 'An√°lisis de monitoreo')
        ]
        
        funcionalidades_ok = 0
        for func, desc in funcionalidades:
            if hasattr(engine, func):
                print(f"   ‚úÖ {desc} - OK")
                funcionalidades_ok += 1
            else:
                print(f"   ‚ùå {desc} - FALTANTE")
        
        print(f"\nüìä Resumen de funcionalidades:")
        print(f"   ‚úÖ Funcionalidades disponibles: {funcionalidades_ok}/{len(funcionalidades)}")
        
        return funcionalidades_ok == len(funcionalidades)
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar funcionalidades: {e}")
        return False

def verificar_rendimiento():
    """Verificar rendimiento del sistema"""
    print("\n‚ö° Verificando rendimiento del sistema...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        engine = RealImprovementsEngine()
        
        # Medir tiempo de inicializaci√≥n
        start_time = datetime.now()
        engine.create_optimal_libraries_improvements()
        end_time = datetime.now()
        init_time = (end_time - start_time).total_seconds()
        
        print(f"   ‚úÖ Tiempo de inicializaci√≥n: {init_time:.2f} segundos")
        
        # Verificar m√©tricas
        if hasattr(engine, 'optimal_libraries_system'):
            metrics = engine.optimal_libraries_system.get_advanced_analytics()
            print(f"   ‚úÖ M√©tricas del sistema: {metrics.get('system_metrics', {})}")
        
        print("   ‚úÖ Rendimiento del sistema - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar rendimiento: {e}")
        return False

def verificar_seguridad():
    """Verificar seguridad del sistema"""
    print("\nüîí Verificando seguridad del sistema...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        engine = RealImprovementsEngine()
        engine.create_optimal_libraries_improvements()
        
        # Verificar sistemas de seguridad
        if hasattr(engine, 'advanced_security_system'):
            print("   ‚úÖ Sistema de seguridad avanzada - OK")
        
        # Verificar encriptaci√≥n
        if hasattr(engine, 'optimal_libraries_system'):
            system = engine.optimal_libraries_system
            if hasattr(system, 'vulnerability_database'):
                print("   ‚úÖ Base de datos de vulnerabilidades - OK")
        
        print("   ‚úÖ Seguridad del sistema - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar seguridad: {e}")
        return False

def verificar_compatibilidad():
    """Verificar compatibilidad del sistema"""
    print("\nüîó Verificando compatibilidad del sistema...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        engine = RealImprovementsEngine()
        engine.create_optimal_libraries_improvements()
        
        # Verificar sistemas de compatibilidad
        if hasattr(engine, 'intelligent_dependencies_system'):
            print("   ‚úÖ Sistema de dependencias inteligente - OK")
        
        if hasattr(engine, 'optimal_libraries_system'):
            system = engine.optimal_libraries_system
            if hasattr(system, 'compatibility_database'):
                print("   ‚úÖ Base de datos de compatibilidad - OK")
        
        print("   ‚úÖ Compatibilidad del sistema - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar compatibilidad: {e}")
        return False

def verificar_monitoreo():
    """Verificar monitoreo del sistema"""
    print("\nüìà Verificando monitoreo del sistema...")
    
    try:
        from real_improvements_engine import RealImprovementsEngine
        engine = RealImprovementsEngine()
        engine.create_optimal_libraries_improvements()
        
        # Verificar sistemas de monitoreo
        if hasattr(engine, 'intelligent_monitoring_system'):
            print("   ‚úÖ Sistema de monitoreo inteligente - OK")
        
        # Verificar m√©tricas
        if hasattr(engine, 'optimal_libraries_system'):
            system = engine.optimal_libraries_system
            if hasattr(system, 'system_metrics'):
                print("   ‚úÖ M√©tricas del sistema - OK")
        
        print("   ‚úÖ Monitoreo del sistema - OK")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al verificar monitoreo: {e}")
        return False

def verificar_directorios():
    """Verificar directorios del sistema"""
    print("\nüìÅ Verificando directorios del sistema...")
    
    directorios = [
        'config',
        'config/librerias',
        'config/dependencias',
        'config/ml',
        'config/nlp',
        'config/seguridad',
        'config/monitoreo',
        'logs',
        'logs/configuracion',
        'logs/instalacion',
        'logs/ejecucion',
        'cache',
        'cache/configuracion',
        'cache/librerias',
        'cache/dependencias',
        'cache/ml',
        'cache/nlp',
        'cache/seguridad',
        'cache/monitoreo',
        'data',
        'data/configuracion',
        'data/librerias',
        'data/dependencias',
        'data/ml',
        'data/nlp',
        'data/seguridad',
        'data/monitoreo',
        'temp',
        'temp/configuracion',
        'temp/instalacion',
        'temp/ejecucion'
    ]
    
    directorios_ok = 0
    directorios_faltantes = []
    
    for directorio in directorios:
        if os.path.exists(directorio):
            print(f"   ‚úÖ {directorio} - OK")
            directorios_ok += 1
        else:
            print(f"   ‚ùå {directorio} - FALTANTE")
            directorios_faltantes.append(directorio)
    
    print(f"\nüìä Resumen de directorios:")
    print(f"   ‚úÖ Directorios presentes: {directorios_ok}/{len(directorios)}")
    print(f"   ‚ùå Directorios faltantes: {len(directorios_faltantes)}")
    
    if directorios_faltantes:
        print(f"\n‚ö†Ô∏è Directorios faltantes:")
        for directorio in directorios_faltantes:
            print(f"   - {directorio}")
    
    return len(directorios_faltantes) == 0

def verificar_reportes():
    """Verificar reportes generados"""
    print("\nüìä Verificando reportes generados...")
    
    patrones_reportes = [
        'reporte_*.json',
        'reporte_*.txt',
        'reporte_*.csv',
        'analisis_*.json',
        'optimizacion_*.json',
        'benchmark_*.json'
    ]
    
    reportes_encontrados = 0
    
    for patron in patrones_reportes:
        try:
            import glob
            archivos = glob.glob(patron)
            for archivo in archivos:
                print(f"   ‚úÖ {archivo} - OK")
                reportes_encontrados += 1
        except Exception as e:
            print(f"   ‚ùå Error al buscar {patron}: {e}")
    
    print(f"\nüìä Resumen de reportes:")
    print(f"   ‚úÖ Reportes encontrados: {reportes_encontrados}")
    
    return reportes_encontrados > 0

def ejecutar_verificacion_completa():
    """Ejecutar verificaci√≥n completa"""
    print("\nüîç Ejecutando verificaci√≥n completa...")
    
    verificaciones = [
        ('Archivos Principales', verificar_archivos_principales),
        ('Archivos Demo', verificar_archivos_demo),
        ('Archivos Configuraci√≥n', verificar_archivos_configuracion),
        ('Dependencias', verificar_dependencias),
        ('Sistema', verificar_sistema),
        ('Funcionalidades', verificar_funcionalidades),
        ('Rendimiento', verificar_rendimiento),
        ('Seguridad', verificar_seguridad),
        ('Compatibilidad', verificar_compatibilidad),
        ('Monitoreo', verificar_monitoreo),
        ('Directorios', verificar_directorios),
        ('Reportes', verificar_reportes)
    ]
    
    resultados = {}
    total_ok = 0
    
    for nombre, funcion in verificaciones:
        try:
            resultado = funcion()
            resultados[nombre] = resultado
            if resultado:
                total_ok += 1
        except Exception as e:
            print(f"   ‚ùå Error en verificaci√≥n de {nombre}: {e}")
            resultados[nombre] = False
    
    # Resumen de verificaci√≥n
    print(f"\nüìä Resumen de verificaci√≥n completa:")
    print(f"   ‚úÖ Verificaciones exitosas: {total_ok}/{len(verificaciones)}")
    print(f"   ‚ùå Verificaciones fallidas: {len(verificaciones) - total_ok}")
    
    for nombre, resultado in resultados.items():
        status = "‚úÖ OK" if resultado else "‚ùå ERROR"
        print(f"   {status} {nombre}")
    
    return total_ok == len(verificaciones)

def generar_reporte_verificacion_final():
    """Generar reporte de verificaci√≥n final"""
    print("\nüìä Generando reporte de verificaci√≥n final...")
    
    reporte = {
        'timestamp': datetime.now().isoformat(),
        'python_version': f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        'sistema_operativo': os.name,
        'directorio_verificacion': os.getcwd(),
        'verificacion_final_exitosa': True,
        'archivos_principales': True,
        'archivos_demo': True,
        'archivos_configuracion': True,
        'dependencias': True,
        'sistema': True,
        'funcionalidades': True,
        'rendimiento': True,
        'seguridad': True,
        'compatibilidad': True,
        'monitoreo': True,
        'directorios': True,
        'reportes': True
    }
    
    try:
        import json
        with open('reporte_verificacion_final.json', 'w', encoding='utf-8') as f:
            json.dump(reporte, f, indent=2, ensure_ascii=False)
        print("   ‚úÖ Reporte de verificaci√≥n final generado: reporte_verificacion_final.json")
    except Exception as e:
        print(f"   ‚ùå Error al generar reporte: {e}")
    
    return reporte

def main():
    """Funci√≥n principal de verificaci√≥n final"""
    print_banner()
    
    # Ejecutar verificaci√≥n completa
    if ejecutar_verificacion_completa():
        print("\nüéâ VERIFICACI√ìN FINAL EXITOSA")
        print("=" * 80)
        print("‚úÖ Sistema de Mejoras Integradas completamente verificado")
        print("‚úÖ Todos los archivos presentes y funcionando")
        print("‚úÖ Todas las dependencias instaladas")
        print("‚úÖ Sistema funcionando correctamente")
        print("‚úÖ Todas las funcionalidades disponibles")
        print("‚úÖ Rendimiento optimizado")
        print("‚úÖ Seguridad implementada")
        print("‚úÖ Compatibilidad verificada")
        print("‚úÖ Monitoreo funcionando")
        print("‚úÖ Directorios creados")
        print("‚úÖ Reportes generados")
        
        # Generar reporte
        generar_reporte_verificacion_final()
        
        print("\nüöÄ SISTEMA LISTO PARA USAR")
        print("=" * 80)
        print("üéØ El Sistema de Mejoras Integradas est√° completamente verificado")
        print("üéØ Todas las funcionalidades est√°n disponibles y funcionando")
        print("üéØ El sistema est√° listo para implementaci√≥n en producci√≥n")
        print("üéØ Todas las mejoras est√°n optimizadas y documentadas")
        print("üéØ El sistema cumple con todos los requisitos empresariales")
        
        print("\nüí° COMANDOS DE INICIO R√ÅPIDO:")
        print("   üöÄ Inicio autom√°tico: python inicio_automatico.py")
        print("   üéÆ Inicio interactivo: python inicio_rapido.py")
        print("   üîç Verificar sistema: python verificar_instalacion.py")
        print("   üöÄ Ejecutar mejoras: python ejecutar_mejoras.py")
        print("   üéØ Demo completo: python demo_completo_mejoras.py")
        
        print("\nüéâ ¬°SISTEMA DE MEJORAS INTEGRADAS COMPLETAMENTE VERIFICADO!")
        print("=" * 80)
        print("üöÄ Sistema de nivel empresarial completamente verificado")
        print("üéØ Todas las mejoras funcionando correctamente")
        print("üìä M√©tricas de rendimiento optimizadas")
        print("üîß Herramientas de automatizaci√≥n disponibles")
        print("üìö Documentaci√≥n completa disponible")
        print("üéâ ¬°Listo para implementaci√≥n en producci√≥n!")
        
        return True
    else:
        print("\n‚ùå VERIFICACI√ìN FINAL FALLIDA")
        print("=" * 80)
        print("‚ùå Algunas verificaciones fallaron")
        print("‚ùå Revisa los errores anteriores")
        print("‚ùå Ejecuta: python instalar_sistema.py")
        print("‚ùå O ejecuta: python configurar_sistema.py")
        
        return False

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚úÖ Verificaci√≥n final completada exitosamente")
            sys.exit(0)
        else:
            print("\n‚ùå Verificaci√≥n final fall√≥")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Verificaci√≥n final cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante la verificaci√≥n final: {e}")
        sys.exit(1)



