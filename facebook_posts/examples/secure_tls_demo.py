from typing_extensions import Literal, TypedDict
from typing import Any, List, Dict, Optional, Union, Tuple
# Constants
TIMEOUT_SECONDS = 60

import asyncio
import sys
import os
import ssl
import socket
import time
from typing import Dict, Any, List
    from cybersecurity.security_implementation import (
        import ssl
        import socket
        import cryptography
from typing import Any, List, Dict, Optional
import logging
#!/usr/bin/env python3
"""
Demo script for secure TLS defaults and cipher suite configuration.
Showcases TLSv1.2+ security, strong cipher suites, and secure defaults.
"""


# Add current directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
        SecurityConfig, SecureTLSConfig, create_secure_ssl_context,
        validate_cipher_suite, SecurityError
    )
    print("‚úì Secure TLS implementation modules loaded successfully!")
except ImportError as e:
    print(f"‚úó Error importing modules: {e}")
    sys.exit(1)

def demo_tls_configuration():
    """Demo secure TLS configuration."""
    print("\n" + "="*60)
    print("üîê SECURE TLS CONFIGURATION DEMO")
    print("="*60)
    
    tls_config = SecureTLSConfig()
    
    # Demo strong cipher suites
    print("üîí Strong Cipher Suites (TLS 1.2+):")
    for i, cipher in enumerate(tls_config.strong_cipher_suites, 1):
        is_valid = tls_config.validate_cipher_suite(cipher)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"   {i:2d}. {cipher:<35} {status}")
    
    print(f"\nüîí TLS 1.3 Cipher Suites:")
    for i, cipher in enumerate(tls_config.tls13_cipher_suites, 1):
        is_valid = tls_config.validate_cipher_suite(cipher)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"   {i:2d}. {cipher:<35} {status}")
    
    # Demo weak cipher detection
    print(f"\n‚ùå Weak Cipher Detection:")
    weak_ciphers = [
        "NULL-SHA",
        "aNULL",
        "DES-CBC-SHA",
        "RC4-SHA",
        "MD5",
        "EXPORT-RC4-MD5"
    ]
    
    for cipher in weak_ciphers:
        is_valid = tls_config.validate_cipher_suite(cipher)
        status = "‚ùå BLOCKED" if not is_valid else "‚ö†Ô∏è  SHOULD BE BLOCKED"
        print(f"   ‚Ä¢ {cipher:<20} {status}")

def demo_ssl_context_creation():
    """Demo secure SSL context creation."""
    print("\n" + "="*60)
    print("üîß SECURE SSL CONTEXT CREATION DEMO")
    print("="*60)
    
    tls_config = SecureTLSConfig()
    
    # Test TLS 1.2 context
    print("üîê Creating TLS 1.2 SSL Context:")
    try:
        context_tls12 = tls_config.create_secure_ssl_context("TLSv1.2")
        print("   ‚úÖ TLS 1.2 context created successfully")
        print(f"   üìä Minimum version: {context_tls12.minimum_version}")
        print(f"   üìä Maximum version: {context_tls12.maximum_version}")
        print(f"   üîí Verify mode: {context_tls12.verify_mode}")
        print(f"   üîç Check hostname: {context_tls12.check_hostname}")
        
        # Get cipher list
        cipher_list = context_tls12.get_ciphers()
        print(f"   üîê Cipher count: {len(cipher_list)}")
        print("   üìã First 5 ciphers:")
        for i, cipher in enumerate(cipher_list[:5], 1):
            print(f"      {i}. {cipher['name']}")
            
    except Exception as e:
        print(f"   ‚ùå Error creating TLS 1.2 context: {e}")
    
    # Test TLS 1.3 context
    print(f"\nüîê Creating TLS 1.3 SSL Context:")
    try:
        context_tls13 = tls_config.create_secure_ssl_context("TLSv1.3")
        print("   ‚úÖ TLS 1.3 context created successfully")
        print(f"   üìä Minimum version: {context_tls13.minimum_version}")
        print(f"   üìä Maximum version: {context_tls13.maximum_version}")
        print(f"   üîí Verify mode: {context_tls13.verify_mode}")
        print(f"   üîç Check hostname: {context_tls13.check_hostname}")
        
        # Get cipher list
        cipher_list = context_tls13.get_ciphers()
        print(f"   üîê Cipher count: {len(cipher_list)}")
        print("   üìã Available ciphers:")
        for i, cipher in enumerate(cipher_list, 1):
            print(f"      {i}. {cipher['name']}")
            
    except Exception as e:
        print(f"   ‚ùå Error creating TLS 1.3 context: {e}")

def demo_cipher_validation():
    """Demo cipher suite validation."""
    print("\n" + "="*60)
    print("üîç CIPHER SUITE VALIDATION DEMO")
    print("="*60)
    
    tls_config = SecureTLSConfig()
    
    # Test various cipher suites
    test_ciphers = [
        # Strong ciphers (should pass)
        ("ECDHE-RSA-AES256-GCM-SHA384", True),
        ("ECDHE-RSA-AES128-GCM-SHA256", True),
        ("TLS_AES_256_GCM_SHA384", True),
        ("TLS_CHACHA20_POLY1305_SHA256", True),
        
        # Weak ciphers (should fail)
        ("NULL-SHA", False),
        ("DES-CBC-SHA", False),
        ("RC4-SHA", False),
        ("EXPORT-RC4-MD5", False),
        ("aNULL", False),
        ("MD5", False)
    ]
    
    print("üß™ Testing cipher suite validation:")
    for cipher, expected in test_ciphers:
        is_valid = tls_config.validate_cipher_suite(cipher)
        status = "‚úÖ PASS" if is_valid == expected else "‚ùå FAIL"
        expected_text = "VALID" if expected else "INVALID"
        actual_text = "VALID" if is_valid else "INVALID"
        print(f"   ‚Ä¢ {cipher:<35} Expected: {expected_text:<8} Actual: {actual_text:<8} {status}")

def demo_secure_config():
    """Demo secure configuration with TLS defaults."""
    print("\n" + "="*60)
    print("‚öôÔ∏è SECURE CONFIGURATION DEMO")
    print("="*60)
    
    # Create secure config
    config = SecurityConfig()
    print("‚úÖ Secure configuration created")
    print(f"   üîê TLS Version: {config.tls_version}")
    print(f"   üîê Min TLS Version: {config.min_tls_version}")
    print(f"   üîí Verify SSL: {config.verify_ssl}")
    print(f"   üîí Cert Verify Mode: {config.cert_verify_mode}")
    print(f"   ‚è±Ô∏è  Timeout: {config.timeout}s")
    print(f"   üîÑ Max Retries: {config.max_retries}")
    print(f"   üö¶ Rate Limit: {config.rate_limit}")
    print(f"   ‚è∞ Session Timeout: {config.session_timeout}s")
    
    # Validate config
    try:
        config.validate()
        print("   ‚úÖ Configuration validation: PASSED")
    except SecurityError as e:
        print(f"   ‚ùå Configuration validation: FAILED - {e.message}")
    
    # Show cipher suites
    print(f"\nüîê Configured Cipher Suites ({len(config.cipher_suites)}):")
    for i, cipher in enumerate(config.cipher_suites, 1):
        is_valid = validate_cipher_suite(cipher)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {i:2d}. {status} {cipher}")

def demo_network_security():
    """Demo network security with secure TLS."""
    print("\n" + "="*60)
    print("üåê NETWORK SECURITY DEMO")
    print("="*60)
    
    # Test targets (replace with actual targets for real testing)
    test_targets = [
        ("https://httpbin.org", 443),
        ("https://example.com", 443),
        ("https://google.com", 443)
    ]
    
    print("üîç Testing secure TLS connections:")
    
    for hostname, port in test_targets:
        print(f"\nüì° Testing: {hostname}:{port}")
        
        try:
            # Create secure SSL context
            context = create_secure_ssl_context("TLSv1.2")
            
            # Create socket with timeout
            sock = socket.create_connection((hostname, port), timeout=10)
            
            # Wrap with SSL
            ssl_sock = context.wrap_socket(sock, server_hostname=hostname)
            
            # Get connection info
            cipher = ssl_sock.cipher()
            version = ssl_sock.version()
            cert = ssl_sock.getpeercert()
            
            print(f"   ‚úÖ Connection successful")
            print(f"   üîê TLS Version: {version}")
            print(f"   üîí Cipher: {cipher[0]}")
            print(f"   üîë Key Exchange: {cipher[1]}")
            print(f"   üîê Authentication: {cipher[2]}")
            
            if cert:
                subject = dict(x[0] for x in cert['subject'])
                issuer = dict(x[0] for x in cert['issuer'])
                print(f"   üìú Subject: {subject.get('commonName', 'Unknown')}")
                print(f"   üè¢ Issuer: {issuer.get('commonName', 'Unknown')}")
            
            ssl_sock.close()
            
        except ssl.SSLError as e:
            print(f"   ‚ùå SSL Error: {e}")
        except socket.timeout:
            print(f"   ‚è∞ Connection timeout")
        except Exception as e:
            print(f"   ‚ùå Connection failed: {e}")

def demo_utility_functions():
    """Demo utility functions for TLS security."""
    print("\n" + "="*60)
    print("üõ†Ô∏è TLS UTILITY FUNCTIONS DEMO")
    print("="*60)
    
    # Test secure SSL context creation
    print("üîß Testing secure SSL context creation:")
    try:
        context_tls12 = create_secure_ssl_context("TLSv1.2")
        print("   ‚úÖ TLS 1.2 context created")
        
        context_tls13 = create_secure_ssl_context("TLSv1.3")
        print("   ‚úÖ TLS 1.3 context created")
        
    except Exception as e:
        print(f"   ‚ùå Error creating contexts: {e}")
    
    # Test cipher validation
    print(f"\nüîç Testing cipher validation:")
    test_ciphers = [
        "ECDHE-RSA-AES256-GCM-SHA384",  # Strong
        "TLS_AES_256_GCM_SHA384",       # TLS 1.3
        "NULL-SHA",                      # Weak
        "DES-CBC-SHA",                   # Weak
        "RC4-SHA"                        # Weak
    ]
    
    for cipher in test_ciphers:
        is_valid = validate_cipher_suite(cipher)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"   ‚Ä¢ {cipher:<35} {status}")

def demo_security_comparison():
    """Demo security comparison between secure and insecure defaults."""
    print("\n" + "="*60)
    print("‚öñÔ∏è SECURITY COMPARISON DEMO")
    print("="*60)
    
    print("üîí SECURE DEFAULTS (Recommended):")
    print("   ‚úÖ TLS 1.2+ only")
    print("   ‚úÖ Strong cipher suites (AES-GCM, ChaCha20)")
    print("   ‚úÖ Certificate verification required")
    print("   ‚úÖ Hostname verification enabled")
    print("   ‚úÖ Weak ciphers disabled")
    print("   ‚úÖ Compression disabled")
    print("   ‚úÖ Renegotiation disabled")
    
    print(f"\n‚ùå INSECURE DEFAULTS (Avoid):")
    print("   ‚ùå TLS 1.0/1.1 allowed")
    print("   ‚ùå Weak ciphers (RC4, DES, NULL)")
    print("   ‚ùå No certificate verification")
    print("   ‚ùå No hostname verification")
    print("   ‚ùå Compression enabled")
    print("   ‚ùå Renegotiation allowed")
    
    print(f"\nüìä Security Benefits:")
    print("   üõ°Ô∏è  Protection against downgrade attacks")
    print("   üõ°Ô∏è  Protection against cipher suite attacks")
    print("   üõ°Ô∏è  Protection against man-in-the-middle attacks")
    print("   üõ°Ô∏è  Protection against compression attacks")
    print("   üõ°Ô∏è  Protection against renegotiation attacks")

def demo_library_availability():
    """Check and display TLS library availability."""
    print("\n" + "="*60)
    print("üìö TLS LIBRARY AVAILABILITY CHECK")
    print("="*60)
    
    # Check SSL library
    try:
        print("‚úÖ ssl: Available")
        print(f"   OpenSSL version: {ssl.OPENSSL_VERSION}")
        print(f"   SSL version: {ssl.SSLContext().minimum_version}")
    except ImportError:
        print("‚ùå ssl: Not available")
    
    # Check socket library
    try:
        print("‚úÖ socket: Available")
    except ImportError:
        print("‚ùå socket: Not available")
    
    # Check cryptography library
    try:
        print("‚úÖ cryptography: Available")
        print(f"   Version: {cryptography.__version__}")
    except ImportError:
        print("‚ùå cryptography: Not available")
        print("   Install with: pip install cryptography")

def main():
    """Main demo function."""
    print("üîê SECURE TLS DEFAULTS DEMO")
    print("="*60)
    print("This demo showcases secure TLS configuration, strong cipher suites,")
    print("and secure defaults for network communications.")
    
    # Check library availability
    demo_library_availability()
    
    # Run demos
    demo_tls_configuration()
    demo_ssl_context_creation()
    demo_cipher_validation()
    demo_secure_config()
    demo_network_security()
    demo_utility_functions()
    demo_security_comparison()
    
    print("\n" + "="*60)
    print("‚úÖ SECURE TLS DEFAULTS DEMO COMPLETED SUCCESSFULLY!")
    print("="*60)
    print("Key security features demonstrated:")
    print("‚Ä¢ TLS 1.2+ enforcement with secure defaults")
    print("‚Ä¢ Strong cipher suite validation and filtering")
    print("‚Ä¢ Secure SSL context creation")
    print("‚Ä¢ Certificate and hostname verification")
    print("‚Ä¢ Protection against common TLS attacks")
    print("‚Ä¢ Network security with proper validation")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Demo interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Demo failed: {e}")
        sys.exit(1) 