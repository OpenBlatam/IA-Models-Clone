name: Ultra-Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .
    
    - name: Linting
      run: |
        flake8 .
        pylint --rcfile=.pylintrc .
        mypy .
    
    - name: Security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Dependency vulnerability scan
      run: |
        pip-audit --format=json --output=audit-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          audit-report.json

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-type: ['unit', 'integration', 'performance']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test database
      run: |
        docker run -d --name test-postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=test_db -p 5432:5432 postgres:15-alpine
        docker run -d --name test-redis -p 6379:6379 redis:7-alpine
        sleep 10
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=unit-test-results.xml
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v --junitxml=integration-test-results.xml
    
    - name: Run performance tests
      if: matrix.test-type == 'performance'
      run: |
        pytest tests/performance/ -v --junitxml=performance-test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-type }}-${{ matrix.python-version }}
        path: |
          *-test-results.xml
          coverage.xml
          htmlcov/
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop test-postgres test-redis || true
        docker rm test-postgres test-redis || true

  # Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk security scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build.outputs.image-tag }}
        args: --severity-threshold=high

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -f deployment/kubernetes.yml
        kubectl set image deployment/bulk-truthgpt-app bulk-truthgpt-app=${{ needs.build.outputs.image-tag }} -n bulk-truthgpt
        kubectl rollout status deployment/bulk-truthgpt-app -n bulk-truthgpt
    
    - name: Run smoke tests
      run: |
        kubectl port-forward service/bulk-truthgpt-app-service 8000:8000 -n bulk-truthgpt &
        sleep 30
        curl -f http://localhost:8000/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Deploy to production
      run: |
        kubectl apply -f deployment/kubernetes.yml
        kubectl set image deployment/bulk-truthgpt-app bulk-truthgpt-app=${{ needs.build.outputs.image-tag }} -n bulk-truthgpt
        kubectl rollout status deployment/bulk-truthgpt-app -n bulk-truthgpt
    
    - name: Run health checks
      run: |
        kubectl port-forward service/bulk-truthgpt-app-service 8000:8000 -n bulk-truthgpt &
        sleep 30
        curl -f http://localhost:8000/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run load tests
      run: |
        locust -f tests/performance/load_test.py --headless -u 100 -r 10 -t 60s --html=load-test-report.html
    
    - name: Run stress tests
      run: |
        locust -f tests/performance/stress_test.py --headless -u 500 -r 50 -t 300s --html=stress-test-report.html
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          load-test-report.html
          stress-test-report.html

  # Monitoring and Alerting
  monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up monitoring
      run: |
        # Set up Prometheus
        kubectl apply -f monitoring/prometheus.yml -n bulk-truthgpt
        
        # Set up Grafana
        kubectl apply -f monitoring/grafana.yml -n bulk-truthgpt
        
        # Set up alerting
        kubectl apply -f monitoring/alertmanager.yml -n bulk-truthgpt
    
    - name: Configure monitoring
      run: |
        # Configure Prometheus targets
        kubectl apply -f monitoring/prometheus-config.yml -n bulk-truthgpt
        
        # Configure Grafana dashboards
        kubectl apply -f monitoring/grafana-dashboards.yml -n bulk-truthgpt
        
        # Configure alerting rules
        kubectl apply -f monitoring/alerting-rules.yml -n bulk-truthgpt

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        # Clean up old Docker images
        docker system prune -f
        
        # Clean up old Kubernetes resources
        kubectl delete pods --field-selector=status.phase=Succeeded -n bulk-truthgpt
        kubectl delete pods --field-selector=status.phase=Failed -n bulk-truthgpt
    
    - name: Cleanup old artifacts
      run: |
        # Clean up old GitHub artifacts
        gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.created_at < (now - 7*24*3600)) | .id' | xargs -I {} gh api repos/${{ github.repository }}/actions/artifacts/{} -X DELETE









