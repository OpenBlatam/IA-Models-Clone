version: '3.8'

services:
  # Redis for caching and service registry
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: microservices-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - microservices-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: microservices-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: microservices-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - microservices-network

  # API Gateway
  api-gateway:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.gateway
    container_name: microservices-api-gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=jaeger:14268
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - jaeger
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.service
    container_name: microservices-user-service
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=jaeger:14268
      - SERVICE_NAME=user-service
      - SERVICE_PORT=8001
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - jaeger
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Video Service
  video-service:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.service
    container_name: microservices-video-service
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=jaeger:14268
      - SERVICE_NAME=video-service
      - SERVICE_PORT=8002
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - jaeger
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.service
    container_name: microservices-notification-service
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=jaeger:14268
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=8003
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - jaeger
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: microservices-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - microservices-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge






























