from typing_extensions import Literal, TypedDict
from typing import Any, List, Dict, Optional, Union, Tuple
# Constants
MAX_CONNECTIONS = 1000

# Constants
MAX_RETRIES = 100

from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, field_validator
from datetime import datetime
from enum import Enum
from typing import Any, List, Dict, Optional
import logging
import asyncio
"""
Vulnerability API schemas for cybersecurity tools.
"""

class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityStatus(str, Enum):
    """Vulnerability status."""
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    FIXED = "fixed"
    VERIFIED = "verified"
    FALSE_POSITIVE = "false_positive"
    ACCEPTED_RISK = "accepted_risk"
    CLOSED = "closed"

class VulnerabilityType(str, Enum):
    """Vulnerability types."""
    BUFFER_OVERFLOW = "buffer_overflow"
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    CSRF = "csrf"
    PATH_TRAVERSAL = "path_traversal"
    COMMAND_INJECTION = "command_injection"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    WEAK_AUTHENTICATION = "weak_authentication"
    WEAK_ENCRYPTION = "weak_encryption"
    MISCONFIGURATION = "misconfiguration"
    OUTDATED_SOFTWARE = "outdated_software"
    OPEN_PORTS = "open_ports"
    DEFAULT_CREDENTIALS = "default_credentials"
    INSECURE_PROTOCOLS = "insecure_protocols"
    OTHER = "other"

# Request Schemas
class CreateVulnerabilityRequest(BaseModel):
    """Request schema for creating a vulnerability."""
    title: str = Field(..., min_length=1, max_length=200, description="Vulnerability title")
    description: str = Field(..., min_length=1, description="Vulnerability description")
    summary: Optional[str] = Field(None, description="Vulnerability summary")
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cwe_id: Optional[str] = Field(None, description="CWE identifier")
    vulnerability_type: VulnerabilityType = Field(..., description="Vulnerability type")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS base score")
    cvss_vector: Optional[str] = Field(None, description="CVSS vector string")
    cvss_version: Optional[str] = Field(None, description="CVSS version")
    affected_software: List[str] = Field(default_factory=list, description="Affected software")
    affected_versions: List[str] = Field(default_factory=list, description="Affected versions")
    affected_platforms: List[str] = Field(default_factory=list, description="Affected platforms")
    affected_services: List[str] = Field(default_factory=list, description="Affected services")
    attack_vector: Optional[str] = Field(None, description="Attack vector")
    prerequisites: List[str] = Field(default_factory=list, description="Attack prerequisites")
    impact: str = Field(..., description="Potential impact")
    likelihood: Optional[str] = Field(None, description="Attack likelihood")
    complexity: Optional[str] = Field(None, description="Attack complexity")
    is_exploitable: bool = Field(default=False, description="Whether vulnerability is exploitable")
    proof_of_concept: Optional[str] = Field(None, description="Proof of concept code")
    exploitation_notes: Optional[str] = Field(None, description="Exploitation notes")
    remediation: str = Field(..., description="Remediation steps")
    workaround: Optional[str] = Field(None, description="Workaround steps")
    remediation_effort: Optional[str] = Field(None, description="Remediation effort")
    remediation_cost: Optional[str] = Field(None, description="Estimated remediation cost")
    is_verified: bool = Field(default=False, description="Whether vulnerability is verified")
    verification_method: Optional[str] = Field(None, description="Verification method")
    verification_notes: Optional[str] = Field(None, description="Verification notes")
    risk_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="Risk score")
    business_impact: Optional[str] = Field(None, description="Business impact")
    compliance_impact: List[str] = Field(default_factory=list, description="Compliance impacts")
    regulatory_requirements: List[str] = Field(default_factory=list, description="Regulatory requirements")
    references: List[str] = Field(default_factory=list, description="Reference links")
    advisories: List[str] = Field(default_factory=list, description="Security advisories")
    vendor_notifications: List[str] = Field(default_factory=list, description="Vendor notifications")
    evidence_files: List[str] = Field(default_factory=list, description="Evidence files")
    screenshots: List[str] = Field(default_factory=list, description="Screenshot files")
    logs: List[str] = Field(default_factory=list, description="Log files")
    network_captures: List[str] = Field(default_factory=list, description="Network capture files")
    assigned_to: Optional[str] = Field(None, description="Assigned to")
    reporter: Optional[str] = Field(None, description="Vulnerability reporter")
    due_date: Optional[datetime] = Field(None, description="Remediation due date")
    target_fix_date: Optional[datetime] = Field(None, description="Target fix date")
    tags: List[str] = Field(default_factory=list, description="Vulnerability tags")
    notes: Optional[str] = Field(None, description="Additional notes")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    
    @field_validator('title')
    def validate_title(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Title cannot be empty or whitespace only")
        return v.strip()
    
    @field_validator('description')
    def validate_description(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Description cannot be empty or whitespace only")
        return v.strip()
    
    @field_validator('cve_id')
    def validate_cve_id(cls, v) -> bool:
        if v is not None and not v.startswith('CVE-'):
            raise ValueError(f"Invalid CVE ID format: {v}")
        return v
    
    @field_validator('cwe_id')
    def validate_cwe_id(cls, v) -> bool:
        if v is not None and not v.startswith('CWE-'):
            raise ValueError(f"Invalid CWE ID format: {v}")
        return v
    
    @field_validator('cvss_score')
    def validate_cvss_score(cls, v) -> bool:
        if v is not None and (v < 0.0 or v > 10.0):
            raise ValueError("CVSS score must be between 0.0 and 10.0")
        return v
    
    @field_validator('impact')
    def validate_impact(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Impact cannot be empty")
        return v.strip()
    
    @field_validator('remediation')
    def validate_remediation(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Remediation cannot be empty")
        return v.strip()

class UpdateVulnerabilityRequest(BaseModel):
    """Request schema for updating a vulnerability."""
    title: Optional[str] = Field(None, min_length=1, max_length=200, description="Vulnerability title")
    description: Optional[str] = Field(None, min_length=1, description="Vulnerability description")
    summary: Optional[str] = Field(None, description="Vulnerability summary")
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cwe_id: Optional[str] = Field(None, description="CWE identifier")
    vulnerability_type: Optional[VulnerabilityType] = Field(None, description="Vulnerability type")
    severity: Optional[VulnerabilitySeverity] = Field(None, description="Vulnerability severity")
    status: Optional[VulnerabilityStatus] = Field(None, description="Vulnerability status")
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS base score")
    cvss_vector: Optional[str] = Field(None, description="CVSS vector string")
    cvss_version: Optional[str] = Field(None, description="CVSS version")
    affected_software: Optional[List[str]] = Field(None, description="Affected software")
    affected_versions: Optional[List[str]] = Field(None, description="Affected versions")
    affected_platforms: Optional[List[str]] = Field(None, description="Affected platforms")
    affected_services: Optional[List[str]] = Field(None, description="Affected services")
    attack_vector: Optional[str] = Field(None, description="Attack vector")
    prerequisites: Optional[List[str]] = Field(None, description="Attack prerequisites")
    impact: Optional[str] = Field(None, description="Potential impact")
    likelihood: Optional[str] = Field(None, description="Attack likelihood")
    complexity: Optional[str] = Field(None, description="Attack complexity")
    is_exploitable: Optional[bool] = Field(None, description="Whether vulnerability is exploitable")
    proof_of_concept: Optional[str] = Field(None, description="Proof of concept code")
    exploitation_notes: Optional[str] = Field(None, description="Exploitation notes")
    remediation: Optional[str] = Field(None, description="Remediation steps")
    workaround: Optional[str] = Field(None, description="Workaround steps")
    remediation_effort: Optional[str] = Field(None, description="Remediation effort")
    remediation_cost: Optional[str] = Field(None, description="Estimated remediation cost")
    is_verified: Optional[bool] = Field(None, description="Whether vulnerability is verified")
    verification_method: Optional[str] = Field(None, description="Verification method")
    verification_notes: Optional[str] = Field(None, description="Verification notes")
    risk_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="Risk score")
    business_impact: Optional[str] = Field(None, description="Business impact")
    compliance_impact: Optional[List[str]] = Field(None, description="Compliance impacts")
    regulatory_requirements: Optional[List[str]] = Field(None, description="Regulatory requirements")
    references: Optional[List[str]] = Field(None, description="Reference links")
    advisories: Optional[List[str]] = Field(None, description="Security advisories")
    vendor_notifications: Optional[List[str]] = Field(None, description="Vendor notifications")
    evidence_files: Optional[List[str]] = Field(None, description="Evidence files")
    screenshots: Optional[List[str]] = Field(None, description="Screenshot files")
    logs: Optional[List[str]] = Field(None, description="Log files")
    network_captures: Optional[List[str]] = Field(None, description="Network capture files")
    assigned_to: Optional[str] = Field(None, description="Assigned to")
    reporter: Optional[str] = Field(None, description="Vulnerability reporter")
    reviewer: Optional[str] = Field(None, description="Vulnerability reviewer")
    approver: Optional[str] = Field(None, description="Vulnerability approver")
    due_date: Optional[datetime] = Field(None, description="Remediation due date")
    target_fix_date: Optional[datetime] = Field(None, description="Target fix date")
    actual_fix_date: Optional[datetime] = Field(None, description="Actual fix date")
    tags: Optional[List[str]] = Field(None, description="Vulnerability tags")
    notes: Optional[str] = Field(None, description="Additional notes")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Additional metadata")

class VulnerabilityFilterRequest(BaseModel):
    """Request schema for filtering vulnerabilities."""
    vulnerability_type: Optional[VulnerabilityType] = Field(None, description="Filter by vulnerability type")
    severity: Optional[VulnerabilitySeverity] = Field(None, description="Filter by severity")
    status: Optional[VulnerabilityStatus] = Field(None, description="Filter by status")
    cve_id: Optional[str] = Field(None, description="Filter by CVE ID")
    cwe_id: Optional[str] = Field(None, description="Filter by CWE ID")
    is_exploitable: Optional[bool] = Field(None, description="Filter by exploitability")
    is_verified: Optional[bool] = Field(None, description="Filter by verification status")
    assigned_to: Optional[str] = Field(None, description="Filter by assignee")
    reporter: Optional[str] = Field(None, description="Filter by reporter")
    affected_software: Optional[str] = Field(None, description="Filter by affected software")
    affected_platforms: Optional[List[str]] = Field(None, description="Filter by affected platforms")
    compliance_impact: Optional[List[str]] = Field(None, description="Filter by compliance impact")
    discovered_after: Optional[datetime] = Field(None, description="Filter by discovery date (after)")
    discovered_before: Optional[datetime] = Field(None, description="Filter by discovery date (before)")
    due_after: Optional[datetime] = Field(None, description="Filter by due date (after)")
    due_before: Optional[datetime] = Field(None, description="Filter by due date (before)")
    cvss_score_min: Optional[float] = Field(None, ge=0.0, le=10.0, description="Minimum CVSS score")
    cvss_score_max: Optional[float] = Field(None, ge=0.0, le=10.0, description="Maximum CVSS score")
    risk_score_min: Optional[float] = Field(None, ge=0.0, le=10.0, description="Minimum risk score")
    risk_score_max: Optional[float] = Field(None, ge=0.0, le=10.0, description="Maximum risk score")
    search: Optional[str] = Field(None, description="Search in title and description")
    limit: Optional[int] = Field(None, ge=1, le=1000, description="Maximum number of results")
    offset: Optional[int] = Field(None, ge=0, description="Number of results to skip")
    sort_by: Optional[str] = Field(None, description="Sort field")
    sort_order: Optional[str] = Field(None, description="Sort order (asc/desc)")

# Response Schemas
class CVSSVectorResponse(BaseModel):
    """Response schema for CVSS vector components."""
    attack_vector: str = Field(..., description="Attack vector")
    attack_complexity: str = Field(..., description="Attack complexity")
    privileges_required: str = Field(..., description="Privileges required")
    user_interaction: str = Field(..., description="User interaction")
    scope: str = Field(..., description="Scope")
    confidentiality_impact: str = Field(..., description="Confidentiality impact")
    integrity_impact: str = Field(..., description="Integrity impact")
    availability_impact: str = Field(..., description="Availability impact")

class ExploitInfoResponse(BaseModel):
    """Response schema for exploit information."""
    name: str = Field(..., description="Exploit name")
    description: str = Field(..., description="Exploit description")
    url: Optional[str] = Field(None, description="Exploit URL")
    is_public: bool = Field(..., description="Whether exploit is public")
    is_verified: bool = Field(..., description="Whether exploit is verified")
    difficulty: Optional[str] = Field(None, description="Exploit difficulty")

class PatchInfoResponse(BaseModel):
    """Response schema for patch information."""
    patch_id: str = Field(..., description="Patch identifier")
    description: str = Field(..., description="Patch description")
    url: Optional[str] = Field(None, description="Patch URL")
    release_date: Optional[datetime] = Field(None, description="Patch release date")
    is_applied: bool = Field(..., description="Whether patch is applied")
    applied_date: Optional[datetime] = Field(None, description="Patch application date")

class VulnerabilityResponse(BaseModel):
    """Response schema for vulnerability data."""
    id: str = Field(..., description="Unique vulnerability identifier")
    title: str = Field(..., description="Vulnerability title")
    description: str = Field(..., description="Vulnerability description")
    summary: Optional[str] = Field(None, description="Vulnerability summary")
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cwe_id: Optional[str] = Field(None, description="CWE identifier")
    vulnerability_type: VulnerabilityType = Field(..., description="Vulnerability type")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    status: VulnerabilityStatus = Field(..., description="Vulnerability status")
    cvss_score: Optional[float] = Field(None, description="CVSS base score")
    cvss_vector: Optional[CVSSVectorResponse] = Field(None, description="CVSS vector string")
    cvss_version: Optional[str] = Field(None, description="CVSS version")
    affected_software: List[str] = Field(..., description="Affected software")
    affected_versions: List[str] = Field(..., description="Affected versions")
    affected_platforms: List[str] = Field(..., description="Affected platforms")
    affected_services: List[str] = Field(..., description="Affected services")
    discovered_at: datetime = Field(..., description="Discovery timestamp")
    reported_at: Optional[datetime] = Field(None, description="Report timestamp")
    disclosed_at: Optional[datetime] = Field(None, description="Public disclosure date")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    attack_vector: Optional[str] = Field(None, description="Attack vector")
    prerequisites: List[str] = Field(..., description="Attack prerequisites")
    impact: str = Field(..., description="Potential impact")
    likelihood: Optional[str] = Field(None, description="Attack likelihood")
    complexity: Optional[str] = Field(None, description="Attack complexity")
    is_exploitable: bool = Field(..., description="Whether vulnerability is exploitable")
    exploits: List[ExploitInfoResponse] = Field(..., description="Available exploits")
    proof_of_concept: Optional[str] = Field(None, description="Proof of concept code")
    exploitation_notes: Optional[str] = Field(None, description="Exploitation notes")
    remediation: str = Field(..., description="Remediation steps")
    workaround: Optional[str] = Field(None, description="Workaround steps")
    patches: List[PatchInfoResponse] = Field(..., description="Available patches")
    remediation_effort: Optional[str] = Field(None, description="Remediation effort")
    remediation_cost: Optional[str] = Field(None, description="Estimated remediation cost")
    is_verified: bool = Field(..., description="Whether vulnerability is verified")
    verification_method: Optional[str] = Field(None, description="Verification method")
    verification_date: Optional[datetime] = Field(None, description="Verification date")
    verification_notes: Optional[str] = Field(None, description="Verification notes")
    risk_score: Optional[float] = Field(None, description="Risk score")
    business_impact: Optional[str] = Field(None, description="Business impact")
    compliance_impact: List[str] = Field(..., description="Compliance impacts")
    regulatory_requirements: List[str] = Field(..., description="Regulatory requirements")
    references: List[str] = Field(..., description="Reference links")
    advisories: List[str] = Field(..., description="Security advisories")
    vendor_notifications: List[str] = Field(..., description="Vendor notifications")
    evidence_files: List[str] = Field(..., description="Evidence files")
    screenshots: List[str] = Field(..., description="Screenshot files")
    logs: List[str] = Field(..., description="Log files")
    network_captures: List[str] = Field(..., description="Network capture files")
    assigned_to: Optional[str] = Field(None, description="Assigned to")
    reporter: Optional[str] = Field(None, description="Vulnerability reporter")
    reviewer: Optional[str] = Field(None, description="Vulnerability reviewer")
    approver: Optional[str] = Field(None, description="Vulnerability approver")
    due_date: Optional[datetime] = Field(None, description="Remediation due date")
    target_fix_date: Optional[datetime] = Field(None, description="Target fix date")
    actual_fix_date: Optional[datetime] = Field(None, description="Actual fix date")
    metadata: Dict[str, Any] = Field(..., description="Additional metadata")
    tags: List[str] = Field(..., description="Vulnerability tags")
    notes: Optional[str] = Field(None, description="Additional notes")
    is_open: bool = Field(..., description="Whether vulnerability is open")
    is_fixed: bool = Field(..., description="Whether vulnerability is fixed")
    is_critical: bool = Field(..., description="Whether vulnerability is critical")
    is_high_severity: bool = Field(..., description="Whether vulnerability is high severity")
    risk_level: str = Field(..., description="Risk level")
    age_days: int = Field(..., description="Vulnerability age in days")
    is_overdue: bool = Field(..., description="Whether vulnerability is overdue")

class VulnerabilityListResponse(BaseModel):
    """Response schema for vulnerability list."""
    vulnerabilities: List[VulnerabilityResponse] = Field(..., description="List of vulnerabilities")
    total_count: int = Field(..., description="Total number of vulnerabilities")
    filtered_count: int = Field(..., description="Number of vulnerabilities after filtering")
    page: Optional[int] = Field(None, description="Current page number")
    page_size: Optional[int] = Field(None, description="Page size")
    has_next: bool = Field(..., description="Whether there are more results")
    has_previous: bool = Field(..., description="Whether there are previous results")

class VulnerabilityStatsResponse(BaseModel):
    """Response schema for vulnerability statistics."""
    total_vulnerabilities: int = Field(..., description="Total number of vulnerabilities")
    open_vulnerabilities: int = Field(..., description="Number of open vulnerabilities")
    in_progress_vulnerabilities: int = Field(..., description="Number of in-progress vulnerabilities")
    fixed_vulnerabilities: int = Field(..., description="Number of fixed vulnerabilities")
    verified_vulnerabilities: int = Field(..., description="Number of verified vulnerabilities")
    false_positive_vulnerabilities: int = Field(..., description="Number of false positive vulnerabilities")
    accepted_risk_vulnerabilities: int = Field(..., description="Number of accepted risk vulnerabilities")
    closed_vulnerabilities: int = Field(..., description="Number of closed vulnerabilities")
    critical_vulnerabilities: int = Field(..., description="Number of critical vulnerabilities")
    high_vulnerabilities: int = Field(..., description="Number of high vulnerabilities")
    medium_vulnerabilities: int = Field(..., description="Number of medium vulnerabilities")
    low_vulnerabilities: int = Field(..., description="Number of low vulnerabilities")
    info_vulnerabilities: int = Field(..., description="Number of info vulnerabilities")
    vulnerabilities_by_type: Dict[str, int] = Field(..., description="Vulnerabilities count by type")
    vulnerabilities_by_status: Dict[str, int] = Field(..., description="Vulnerabilities count by status")
    vulnerabilities_by_severity: Dict[str, int] = Field(..., description="Vulnerabilities count by severity")
    exploitable_vulnerabilities: int = Field(..., description="Number of exploitable vulnerabilities")
    verified_vulnerabilities_count: int = Field(..., description="Number of verified vulnerabilities")
    average_cvss_score: float = Field(..., description="Average CVSS score")
    average_risk_score: float = Field(..., description="Average risk score")
    overdue_vulnerabilities: int = Field(..., description="Number of overdue vulnerabilities")
    recent_vulnerabilities: List[VulnerabilityResponse] = Field(..., description="Recent vulnerabilities")

class VulnerabilityCreateResponse(BaseModel):
    """Response schema for vulnerability creation."""
    id: str = Field(..., description="Created vulnerability identifier")
    message: str = Field(..., description="Success message")
    created_at: datetime = Field(..., description="Creation timestamp")

class VulnerabilityUpdateResponse(BaseModel):
    """Response schema for vulnerability update."""
    id: str = Field(..., description="Updated vulnerability identifier")
    message: str = Field(..., description="Success message")
    updated_at: datetime = Field(..., description="Update timestamp")
    changes: Dict[str, Any] = Field(..., description="Changes made")

class VulnerabilityDeleteResponse(BaseModel):
    """Response schema for vulnerability deletion."""
    id: str = Field(..., description="Deleted vulnerability identifier")
    message: str = Field(..., description="Success message")
    deleted_at: datetime = Field(..., description="Deletion timestamp")

# Error Schemas
class VulnerabilityErrorResponse(BaseModel):
    """Error response schema for vulnerability operations."""
    error: str = Field(..., description="Error message")
    error_code: Optional[str] = Field(None, description="Error code")
    details: Optional[Dict[str, Any]] = Field(None, description="Error details")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Error timestamp")

# Bulk Operation Schemas
class BulkVulnerabilityRequest(BaseModel):
    """Request schema for bulk vulnerability operations."""
    operation: str = Field(..., description="Bulk operation type")
    vulnerability_ids: List[str] = Field(..., description="List of vulnerability IDs")
    updates: Optional[Dict[str, Any]] = Field(None, description="Updates to apply")

class BulkVulnerabilityResponse(BaseModel):
    """Response schema for bulk vulnerability operations."""
    operation: str = Field(..., description="Bulk operation type")
    total_vulnerabilities: int = Field(..., description="Total number of vulnerabilities")
    successful_operations: int = Field(..., description="Number of successful operations")
    failed_operations: int = Field(..., description="Number of failed operations")
    errors: List[Dict[str, Any]] = Field(default_factory=list, description="Operation errors")
    completed_at: datetime = Field(..., description="Completion timestamp")

# Export Schemas
class VulnerabilityExportRequest(BaseModel):
    """Request schema for vulnerability export."""
    format: str = Field(..., description="Export format (json, csv, xml)")
    filters: Optional[VulnerabilityFilterRequest] = Field(None, description="Export filters")
    include_details: bool = Field(default=True, description="Include detailed vulnerability information")
    include_exploits: bool = Field(default=True, description="Include exploit information")
    include_patches: bool = Field(default=True, description="Include patch information")
    include_evidence: bool = Field(default=False, description="Include evidence files")

class VulnerabilityExportResponse(BaseModel):
    """Response schema for vulnerability export."""
    download_url: str = Field(..., description="Download URL for exported file")
    file_size: int = Field(..., description="File size in bytes")
    format: str = Field(..., description="Export format")
    expires_at: datetime = Field(..., description="Download link expiration")
    vulnerability_count: int = Field(..., description="Number of vulnerabilities exported") 