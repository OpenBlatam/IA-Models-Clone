from typing_extensions import Literal, TypedDict
from typing import Any, List, Dict, Optional, Union, Tuple
from typing import Optional, List, Dict, Any, Union
from pydantic import BaseModel, Field, field_validator
from datetime import datetime
from enum import Enum
from typing import Any, List, Dict, Optional
import logging
import asyncio
"""
Vulnerability data model for cybersecurity tools.
"""

class VulnerabilitySeverity(str, Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityStatus(str, Enum):
    """Vulnerability status."""
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    FIXED = "fixed"
    VERIFIED = "verified"
    FALSE_POSITIVE = "false_positive"
    ACCEPTED_RISK = "accepted_risk"
    CLOSED = "closed"

class VulnerabilityType(str, Enum):
    """Vulnerability types."""
    BUFFER_OVERFLOW = "buffer_overflow"
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    CSRF = "csrf"
    PATH_TRAVERSAL = "path_traversal"
    COMMAND_INJECTION = "command_injection"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    WEAK_AUTHENTICATION = "weak_authentication"
    WEAK_ENCRYPTION = "weak_encryption"
    MISCONFIGURATION = "misconfiguration"
    OUTDATED_SOFTWARE = "outdated_software"
    OPEN_PORTS = "open_ports"
    DEFAULT_CREDENTIALS = "default_credentials"
    INSECURE_PROTOCOLS = "insecure_protocols"
    OTHER = "other"

class CVSSVector(BaseModel):
    """CVSS vector components."""
    attack_vector: str = Field(..., description="Attack vector")
    attack_complexity: str = Field(..., description="Attack complexity")
    privileges_required: str = Field(..., description="Privileges required")
    user_interaction: str = Field(..., description="User interaction")
    scope: str = Field(..., description="Scope")
    confidentiality_impact: str = Field(..., description="Confidentiality impact")
    integrity_impact: str = Field(..., description="Integrity impact")
    availability_impact: str = Field(..., description="Availability impact")

class ExploitInfo(BaseModel):
    """Exploit information."""
    name: str = Field(..., description="Exploit name")
    description: str = Field(..., description="Exploit description")
    url: Optional[str] = Field(None, description="Exploit URL")
    is_public: bool = Field(default=False, description="Whether exploit is public")
    is_verified: bool = Field(default=False, description="Whether exploit is verified")
    difficulty: Optional[str] = Field(None, description="Exploit difficulty")

class PatchInfo(BaseModel):
    """Patch information."""
    patch_id: str = Field(..., description="Patch identifier")
    description: str = Field(..., description="Patch description")
    url: Optional[str] = Field(None, description="Patch URL")
    release_date: Optional[datetime] = Field(None, description="Patch release date")
    is_applied: bool = Field(default=False, description="Whether patch is applied")
    applied_date: Optional[datetime] = Field(None, description="Patch application date")

class VulnerabilityModel(BaseModel):
    """Vulnerability data model."""
    
    # Core fields
    id: str = Field(..., description="Unique vulnerability identifier")
    title: str = Field(..., description="Vulnerability title")
    description: str = Field(..., description="Vulnerability description")
    summary: Optional[str] = Field(None, description="Vulnerability summary")
    
    # Classification
    cve_id: Optional[str] = Field(None, description="CVE identifier")
    cwe_id: Optional[str] = Field(None, description="CWE identifier")
    vulnerability_type: VulnerabilityType = Field(..., description="Vulnerability type")
    severity: VulnerabilitySeverity = Field(..., description="Vulnerability severity")
    status: VulnerabilityStatus = Field(default=VulnerabilityStatus.OPEN, description="Vulnerability status")
    
    # CVSS scoring
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="CVSS base score")
    cvss_vector: Optional[CVSSVector] = Field(None, description="CVSS vector string")
    cvss_version: Optional[str] = Field(None, description="CVSS version")
    
    # Affected systems
    affected_software: List[str] = Field(default_factory=list, description="Affected software")
    affected_versions: List[str] = Field(default_factory=list, description="Affected versions")
    affected_platforms: List[str] = Field(default_factory=list, description="Affected platforms")
    affected_services: List[str] = Field(default_factory=list, description="Affected services")
    
    # Discovery and reporting
    discovered_at: datetime = Field(default_factory=datetime.utcnow, description="Discovery timestamp")
    reported_at: Optional[datetime] = Field(None, description="Report timestamp")
    disclosed_at: Optional[datetime] = Field(None, description="Public disclosure date")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Creation timestamp")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Last update timestamp")
    
    # Technical details
    attack_vector: Optional[str] = Field(None, description="Attack vector")
    prerequisites: List[str] = Field(default_factory=list, description="Attack prerequisites")
    impact: str = Field(..., description="Potential impact")
    likelihood: Optional[str] = Field(None, description="Attack likelihood")
    complexity: Optional[str] = Field(None, description="Attack complexity")
    
    # Exploitation
    is_exploitable: bool = Field(default=False, description="Whether vulnerability is exploitable")
    exploits: List[ExploitInfo] = Field(default_factory=list, description="Available exploits")
    proof_of_concept: Optional[str] = Field(None, description="Proof of concept code")
    exploitation_notes: Optional[str] = Field(None, description="Exploitation notes")
    
    # Remediation
    remediation: str = Field(..., description="Remediation steps")
    workaround: Optional[str] = Field(None, description="Workaround steps")
    patches: List[PatchInfo] = Field(default_factory=list, description="Available patches")
    remediation_effort: Optional[str] = Field(None, description="Remediation effort")
    remediation_cost: Optional[str] = Field(None, description="Estimated remediation cost")
    
    # Verification
    is_verified: bool = Field(default=False, description="Whether vulnerability is verified")
    verification_method: Optional[str] = Field(None, description="Verification method")
    verification_date: Optional[datetime] = Field(None, description="Verification date")
    verification_notes: Optional[str] = Field(None, description="Verification notes")
    
    # Risk assessment
    risk_score: Optional[float] = Field(None, ge=0.0, le=10.0, description="Risk score")
    business_impact: Optional[str] = Field(None, description="Business impact")
    compliance_impact: List[str] = Field(default_factory=list, description="Compliance impacts")
    regulatory_requirements: List[str] = Field(default_factory=list, description="Regulatory requirements")
    
    # References and links
    references: List[str] = Field(default_factory=list, description="Reference links")
    advisories: List[str] = Field(default_factory=list, description="Security advisories")
    vendor_notifications: List[str] = Field(default_factory=list, description="Vendor notifications")
    
    # Evidence and artifacts
    evidence_files: List[str] = Field(default_factory=list, description="Evidence files")
    screenshots: List[str] = Field(default_factory=list, description="Screenshot files")
    logs: List[str] = Field(default_factory=list, description="Log files")
    network_captures: List[str] = Field(default_factory=list, description="Network capture files")
    
    # Assignment and tracking
    assigned_to: Optional[str] = Field(None, description="Assigned to")
    reporter: Optional[str] = Field(None, description="Vulnerability reporter")
    reviewer: Optional[str] = Field(None, description="Vulnerability reviewer")
    approver: Optional[str] = Field(None, description="Vulnerability approver")
    
    # Timeline
    due_date: Optional[datetime] = Field(None, description="Remediation due date")
    target_fix_date: Optional[datetime] = Field(None, description="Target fix date")
    actual_fix_date: Optional[datetime] = Field(None, description="Actual fix date")
    
    # Custom fields
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    tags: List[str] = Field(default_factory=list, description="Vulnerability tags")
    notes: Optional[str] = Field(None, description="Additional notes")
    
    @field_validator('title')
    def validate_title(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Title cannot be empty or whitespace only")
        return v.strip()
    
    @field_validator('description')
    def validate_description(cls, v) -> bool:
        if not v.strip():
            raise ValueError("Description cannot be empty or whitespace only")
        return v.strip()
    
    @field_validator('cve_id')
    def validate_cve_id(cls, v) -> bool:
        if v is not None and not v.startswith('CVE-'):
            raise ValueError(f"Invalid CVE ID format: {v}")
        return v
    
    @field_validator('cwe_id')
    def validate_cwe_id(cls, v) -> bool:
        if v is not None and not v.startswith('CWE-'):
            raise ValueError(f"Invalid CWE ID format: {v}")
        return v
    
    @field_validator('cvss_score')
    def validate_cvss_score(cls, v) -> bool:
        if v is not None and (v < 0.0 or v > 10.0):
            raise ValueError("CVSS score must be between 0.0 and 10.0")
        return v
    
    def is_open(self) -> bool:
    try:
        pass
    except Exception as e:
        print(f"Error: {e}")
        """Check if vulnerability is open."""
        return self.status in [VulnerabilityStatus.OPEN, VulnerabilityStatus.IN_PROGRESS]
    
    def is_fixed(self) -> bool:
        """Check if vulnerability is fixed."""
        return self.status in [VulnerabilityStatus.FIXED, VulnerabilityStatus.VERIFIED]
    
    def is_critical(self) -> bool:
        """Check if vulnerability is critical."""
        return self.severity == VulnerabilitySeverity.CRITICAL
    
    def is_high_severity(self) -> bool:
        """Check if vulnerability is high severity."""
        return self.severity in [VulnerabilitySeverity.CRITICAL, VulnerabilitySeverity.HIGH]
    
    def get_risk_level(self) -> str:
        """Get risk level based on CVSS score."""
        if self.cvss_score is None:
            return "unknown"
        elif self.cvss_score >= 9.0:
            return "critical"
        elif self.cvss_score >= 7.0:
            return "high"
        elif self.cvss_score >= 4.0:
            return "medium"
        elif self.cvss_score >= 0.1:
            return "low"
        else:
            return "none"
    
    def calculate_risk_score(self) -> float:
        """Calculate risk score based on CVSS and other factors."""
        score = 0.0
        
        # Base CVSS score
        if self.cvss_score:
            score += self.cvss_score
        
        # Additional risk factors
        if self.is_exploitable:
            score += 2.0
        if self.exploits:
            score += 1.0
        if self.proof_of_concept:
            score += 1.0
        if not self.is_verified:
            score += 0.5
        
        # Normalize to 0-10 scale
        return min(score, 10.0)
    
    def add_exploit(self, exploit: ExploitInfo) -> None:
        """Add an exploit to the vulnerability."""
        self.exploits.append(exploit)
        self.is_exploitable = True
    
    def add_patch(self, patch: PatchInfo) -> None:
        """Add a patch to the vulnerability."""
        self.patches.append(patch)
    
    def update_status(self, status: VulnerabilityStatus, notes: Optional[str] = None) -> None:
        """Update vulnerability status."""
        self.status = status
        self.updated_at = datetime.utcnow()
        
        if status == VulnerabilityStatus.FIXED:
            self.actual_fix_date = datetime.utcnow()
        
        if notes:
            self.notes = notes
    
    def mark_verified(self, method: str, notes: Optional[str] = None) -> None:
        """Mark vulnerability as verified."""
        self.is_verified = True
        self.verification_method = method
        self.verification_date = datetime.utcnow()
        self.verification_notes = notes
        self.updated_at = datetime.utcnow()
    
    def get_age_days(self) -> int:
        """Get vulnerability age in days."""
        delta = datetime.utcnow() - self.discovered_at
        return delta.days
    
    def is_overdue(self) -> bool:
        """Check if vulnerability is overdue for remediation."""
        if self.due_date is None:
            return False
        return datetime.utcnow() > self.due_date
    
    def get_available_patches(self) -> List[PatchInfo]:
        """Get available patches that are not applied."""
        return [patch for patch in self.patches if not patch.is_applied]
    
    def get_applied_patches(self) -> List[PatchInfo]:
        """Get patches that have been applied."""
        return [patch for patch in self.patches if patch.is_applied]
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert model to dictionary."""
        return self.model_dump()
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'VulnerabilityModel':
        """Create model from dictionary."""
        return cls(**data)
    
    class Config:
        """Pydantic configuration."""
        use_enum_values = True
        validate_assignment = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        } 