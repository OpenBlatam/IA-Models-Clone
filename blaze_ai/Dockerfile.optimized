# ðŸš€ OPTIMIZED Blaze AI Dockerfile
# Multi-stage build for maximum performance and efficiency

# Use Python 3.11 slim image for better performance
FROM python:3.11-slim as base

# Set environment variables for optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    libopenexr-dev \
    libgif-dev \
    libopenjp2-7-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r blazeai && useradd -r -g blazeai blazeai

# Set working directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements-optimized.txt .

# Install Python dependencies with optimization
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-optimized.txt

# Copy application code
COPY . .

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/cache /app/models /app/data && \
    chown -R blazeai:blazeai /app

# Switch to non-root user
USER blazeai

# Expose ports
EXPOSE 8000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python", "optimized_main.py"]

# ============================================================================
# DEVELOPMENT STAGE
# ============================================================================
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    isort \
    ruff \
    mypy \
    pre-commit

# Enable hot reload
ENV PYTHONPATH=/app
ENV RELOAD=true

# Development command
CMD ["uvicorn", "optimized_main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ============================================================================
# PRODUCTION STAGE
# ============================================================================
FROM base as production

# Install production-specific dependencies
RUN pip install --no-cache-dir \
    gunicorn \
    uvicorn[standard] \
    httptools \
    websockets

# Copy production configuration
COPY config-optimized.yaml config.yaml

# Set production environment
ENV ENVIRONMENT=production
ENV DEBUG=false

# Production command with Gunicorn
CMD ["gunicorn", "optimized_main:app", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "8", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--worker-connections", "1000", \
     "--max-requests", "10000", \
     "--max-requests-jitter", "1000", \
     "--timeout", "120", \
     "--keepalive", "65", \
     "--preload"]

# ============================================================================
# GPU STAGE (Optional)
# ============================================================================
FROM nvidia/cuda:11.8-devel-ubuntu20.04 as gpu

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3-pip \
    build-essential \
    curl \
    git \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic links for Python
RUN ln -s /usr/bin/python3.11 /usr/bin/python && \
    ln -s /usr/bin/pip3 /usr/bin/pip

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements-optimized.txt .

# Install Python dependencies with GPU support
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 && \
    pip install --no-cache-dir -r requirements-optimized.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/logs /app/cache /app/models /app/data

# Expose ports
EXPOSE 8000 9090

# GPU command
CMD ["python", "optimized_main.py"]

# ============================================================================
# MINIMAL STAGE (For lightweight deployments)
# ============================================================================
FROM python:3.11-alpine as minimal

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install minimal system dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    postgresql-dev

# Set working directory
WORKDIR /app

# Copy requirements
COPY requirements-optimized.txt .

# Install only essential Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
    fastapi \
    uvicorn[standard] \
    pydantic \
    orjson \
    httptools \
    websockets

# Copy minimal application code
COPY optimized_main.py .
COPY core/ ./core/
COPY api/ ./api/

# Create necessary directories
RUN mkdir -p /app/logs /app/cache

# Expose ports
EXPOSE 8000

# Minimal command
CMD ["python", "optimized_main.py"]

