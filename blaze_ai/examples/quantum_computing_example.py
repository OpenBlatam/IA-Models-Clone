"""
üåê Ejemplos de uso del M√≥dulo de Quantum Computing
Demuestra las capacidades avanzadas de computaci√≥n cu√°ntica del sistema Blaze AI
"""

import asyncio
import numpy as np
from typing import Dict, List, Any

# Importar el m√≥dulo de Quantum Computing
from ..modules.quantum_computing import (
    create_quantum_computing_module,
    QuantumAlgorithmType,
    QuantumBackendType
)


async def ejemplo_basico_quantum():
    """Ejemplo b√°sico de uso del m√≥dulo de Quantum Computing"""
    print("üöÄ Ejemplo B√°sico de Quantum Computing")
    print("=" * 50)
    
    # Crear m√≥dulo de Quantum Computing
    quantum_module = create_quantum_computing_module(
        max_qubits=16,
        shots=2048,
        hybrid_integration=True
    )
    
    # Inicializar m√≥dulo
    await quantum_module.initialize()
    
    # Crear circuito cu√°ntico simple
    circuit_id = await quantum_module.create_circuit(
        name="circuito_basico",
        qubits=4,
        operations=["H(0)", "X(1)", "CX(0,1)", "H(2)"]
    )
    
    print(f"‚úÖ Circuito cu√°ntico creado: {circuit_id}")
    
    # Ejecutar trabajo cu√°ntico con algoritmo QAOA
    job_id = await quantum_module.execute_quantum_job(
        circuit_id=circuit_id,
        algorithm_type=QuantumAlgorithmType.QAOA,
        parameters={"size": 8, "constraints": ["binary"]}
    )
    
    print(f"‚úÖ Trabajo cu√°ntico iniciado: {job_id}")
    
    # Esperar y obtener resultados
    await asyncio.sleep(2)
    
    # Obtener estado del trabajo
    status = await quantum_module.get_job_status(job_id)
    print(f"üìä Estado del trabajo: {status}")
    
    # Obtener resultados
    result = await quantum_module.get_job_result(job_id)
    if result:
        print(f"üéØ Resultado QAOA: {result}")
    
    # Obtener m√©tricas
    metrics = await quantum_module.get_metrics()
    print(f"üìà M√©tricas del m√≥dulo: {metrics}")
    
    # Apagar m√≥dulo
    await quantum_module.shutdown()
    print("‚úÖ M√≥dulo apagado correctamente\n")


async def ejemplo_optimizacion_hibrida():
    """Ejemplo de optimizaci√≥n h√≠brida cl√°sico-cu√°ntica"""
    print("üîÑ Ejemplo de Optimizaci√≥n H√≠brida Cl√°sico-Cu√°ntica")
    print("=" * 60)
    
    # Crear m√≥dulo con configuraci√≥n h√≠brida
    quantum_module = create_quantum_computing_module(
        enabled_algorithms=[QuantumAlgorithmType.QAOA, QuantumAlgorithmType.VQE],
        hybrid_integration=True,
        optimization_level=3
    )
    
    await quantum_module.initialize()
    
    # Problema cl√°sico: optimizaci√≥n de portafolio
    classical_problem = {
        "type": "portfolio_optimization",
        "size": 12,
        "constraints": ["budget_limit", "risk_tolerance"],
        "target": "maximize_returns",
        "assets": ["AAPL", "GOOGL", "MSFT", "TSLA", "AMZN", "NVDA"]
    }
    
    # Par√°metros cu√°nticos para QAOA
    quantum_parameters = {
        "size": 12,
        "constraints": ["binary"],
        "optimization_type": "combinatorial",
        "depth": 3
    }
    
    # Ejecutar optimizaci√≥n h√≠brida
    print("üîÑ Ejecutando optimizaci√≥n h√≠brida...")
    hybrid_result = await quantum_module.hybrid_optimization(
        classical_problem=classical_problem,
        quantum_parameters=quantum_parameters
    )
    
    print("üéØ Resultado de optimizaci√≥n h√≠brida:")
    print(f"  - Tiempo de ejecuci√≥n: {hybrid_result['execution_time']:.3f}s")
    print(f"  - Ventaja h√≠brida: {hybrid_result['hybrid_advantage']:.3f}")
    print(f"  - Soluci√≥n final: {hybrid_result['final_result']['final_solution']}")
    print(f"  - Costo final: {hybrid_result['final_result']['final_cost']:.4f}")
    
    await quantum_module.shutdown()
    print("‚úÖ Optimizaci√≥n h√≠brida completada\n")


async def ejemplo_machine_learning_cuantico():
    """Ejemplo de Machine Learning cu√°ntico"""
    print("üß† Ejemplo de Machine Learning Cu√°ntico")
    print("=" * 50)
    
    # Crear m√≥dulo con ML cu√°ntico habilitado
    quantum_module = create_quantum_computing_module(
        quantum_ml_enabled=True,
        max_qubits=20,
        optimization_level=2
    )
    
    await quantum_module.initialize()
    
    # Generar datos de ejemplo
    np.random.seed(42)
    n_samples = 100
    n_features = 8
    
    # Datos de entrenamiento
    X_train = np.random.randn(n_samples, n_features)
    y_train = np.random.randint(0, 2, n_samples)
    
    print(f"üìä Datos de entrenamiento: {X_train.shape}")
    print(f"üéØ Etiquetas: {y_train.shape}")
    
    # Entrenar clasificador cu√°ntico
    print("üß† Entrenando clasificador cu√°ntico...")
    model_id = await quantum_module.quantum_ml.train_quantum_classifier(
        data=X_train,
        labels=y_train
    )
    
    print(f"‚úÖ Modelo cu√°ntico entrenado: {model_id}")
    
    # Obtener informaci√≥n del modelo
    model_info = quantum_module.quantum_ml.models[model_id]
    print(f"üìà √âpocas de entrenamiento: {model_info['epochs']}")
    print(f"üéØ P√©rdida final: {model_info['final_loss']:.4f}")
    print(f"üîß Par√°metros cu√°nticos: {model_info['parameters']}")
    
    # Ejecutar trabajo de ML cu√°ntico
    circuit_id = await quantum_module.create_circuit(
        name="ml_circuit",
        qubits=16,
        operations=["H(0)", "RX(1)", "CNOT(0,1)", "RY(2)"]
    )
    
    job_id = await quantum_module.execute_quantum_job(
        circuit_id=circuit_id,
        algorithm_type=QuantumAlgorithmType.QUANTUM_ML,
        parameters={"model_id": model_id, "data_size": n_samples}
    )
    
    # Esperar resultados
    await asyncio.sleep(1.5)
    
    result = await quantum_module.get_job_result(job_id)
    if result:
        print("üéØ Resultado de ML cu√°ntico:")
        print(f"  - Precisi√≥n del modelo: {result['model_accuracy']:.3f}")
        print(f"  - Tiempo de entrenamiento: {result['training_time']:.3f}s")
        print(f"  - Ventaja cu√°ntica: {result['quantum_advantage']:.3f}")
    
    await quantum_module.shutdown()
    print("‚úÖ Machine Learning cu√°ntico completado\n")


async def ejemplo_criptografia_post_cuantica():
    """Ejemplo de criptograf√≠a post-cu√°ntica"""
    print("üîê Ejemplo de Criptograf√≠a Post-Cu√°ntica")
    print("=" * 50)
    
    # Crear m√≥dulo con criptograf√≠a post-cu√°ntica
    quantum_module = create_quantum_computing_module(
        post_quantum_crypto=True,
        max_qubits=64
    )
    
    await quantum_module.initialize()
    
    # Generar par de claves post-cu√°ntico
    print("üîë Generando par de claves post-cu√°ntico...")
    keypair = await quantum_module.post_quantum_crypto.generate_post_quantum_keypair(
        algorithm="lattice"
    )
    
    print(f"‚úÖ Claves generadas:")
    print(f"  - Algoritmo: {keypair['algorithm']}")
    print(f"  - Nivel de seguridad: {keypair['security_level']}")
    print(f"  - Clave p√∫blica: {keypair['public_key'][:20]}...")
    print(f"  - Clave privada: {keypair['private_key'][:20]}...")
    
    # Mensaje a firmar
    message = "Mensaje confidencial del sistema Blaze AI"
    print(f"üìù Mensaje: {message}")
    
    # Firmar mensaje
    print("‚úçÔ∏è Firmando mensaje...")
    signature = await quantum_module.post_quantum_crypto.post_quantum_sign(
        message=message,
        private_key=keypair['private_key']
    )
    
    print(f"‚úÖ Firma generada: {signature}")
    
    # Verificar firma
    print("üîç Verificando firma...")
    is_valid = await quantum_module.post_quantum_crypto.post_quantum_verify(
        message=message,
        signature=signature,
        public_key=keypair['public_key']
    )
    
    print(f"‚úÖ Verificaci√≥n: {'Exitosa' if is_valid else 'Fallida'}")
    
    # Probar con mensaje modificado
    modified_message = "Mensaje modificado del sistema Blaze AI"
    is_valid_modified = await quantum_module.post_quantum_crypto.post_quantum_verify(
        message=modified_message,
        signature=signature,
        public_key=keypair['public_key']
    )
    
    print(f"üîç Verificaci√≥n mensaje modificado: {'Exitosa' if is_valid_modified else 'Fallida'}")
    
    await quantum_module.shutdown()
    print("‚úÖ Criptograf√≠a post-cu√°ntica completada\n")


async def ejemplo_algoritmos_cuanticos_avanzados():
    """Ejemplo de algoritmos cu√°nticos avanzados"""
    print("‚ö° Ejemplo de Algoritmos Cu√°nticos Avanzados")
    print("=" * 55)
    
    # Crear m√≥dulo con todos los algoritmos habilitados
    quantum_module = create_quantum_computing_module(
        enabled_algorithms=[
            QuantumAlgorithmType.QAOA,
            QuantumAlgorithmType.VQE,
            QuantumAlgorithmType.GROVER,
            QuantumAlgorithmType.QUANTUM_ML
        ],
        max_qubits=24,
        optimization_level=3
    )
    
    await quantum_module.initialize()
    
    # Crear circuito para m√∫ltiples algoritmos
    circuit_id = await quantum_module.create_circuit(
        name="circuito_avanzado",
        qubits=16,
        operations=["H(0)", "X(1)", "CX(0,1)", "H(2)", "RY(3)", "CNOT(2,3)"]
    )
    
    # Ejecutar m√∫ltiples algoritmos
    algorithms = [
        (QuantumAlgorithmType.QAOA, "Optimizaci√≥n combinatoria"),
        (QuantumAlgorithmType.VQE, "Eigenvalores variacionales"),
        (QuantumAlgorithmType.GROVER, "B√∫squeda cu√°ntica"),
        (QuantumAlgorithmType.QUANTUM_ML, "Machine Learning cu√°ntico")
    ]
    
    jobs = {}
    
    for algorithm_type, description in algorithms:
        print(f"üöÄ Ejecutando {description}...")
        
        job_id = await quantum_module.execute_quantum_job(
            circuit_id=circuit_id,
            algorithm_type=algorithm_type,
            parameters={"size": 16, "depth": 2}
        )
        
        jobs[algorithm_type] = job_id
        print(f"‚úÖ Trabajo iniciado: {job_id}")
    
    # Esperar y recopilar resultados
    print("\n‚è≥ Esperando resultados...")
    await asyncio.sleep(3)
    
    # Mostrar resultados de todos los algoritmos
    print("\nüéØ Resultados de Algoritmos Cu√°nticos:")
    print("-" * 40)
    
    for algorithm_type, job_id in jobs.items():
        status = await quantum_module.get_job_status(job_id)
        result = await quantum_module.get_job_result(job_id)
        
        print(f"\nüî¨ {algorithm_type.value.upper()}:")
        print(f"  - Estado: {status['status']}")
        print(f"  - Tiempo: {status.get('execution_time', 0):.3f}s")
        
        if result and 'error' not in result:
            if algorithm_type == QuantumAlgorithmType.QAOA:
                print(f"  - Soluci√≥n: {result['best_solution'][:10]}...")
                print(f"  - Costo: {result['best_cost']:.4f}")
            elif algorithm_type == QuantumAlgorithmType.VQE:
                print(f"  - Eigenvalor: {result['eigenvalue']:.4f}")
                print(f"  - Convergido: {result['converged']}")
            elif algorithm_type == QuantumAlgorithmType.GROVER:
                print(f"  - Soluci√≥n encontrada: {result['solution_found']}")
                print(f"  - Probabilidad: {result['success_probability']:.3f}")
            elif algorithm_type == QuantumAlgorithmType.QUANTUM_ML:
                print(f"  - Precisi√≥n: {result['model_accuracy']:.3f}")
                print(f"  - Ventaja cu√°ntica: {result['quantum_advantage']:.3f}")
    
    # M√©tricas finales
    metrics = await quantum_module.get_metrics()
    print(f"\nüìä M√©tricas Finales:")
    print(f"  - Total de trabajos: {metrics.total_jobs}")
    print(f"  - Trabajos completados: {metrics.completed_jobs}")
    print(f"  - Trabajos h√≠bridos: {metrics.hybrid_jobs}")
    print(f"  - Trabajos de ML: {metrics.quantum_ml_jobs}")
    print(f"  - Qubits utilizados: {metrics.total_qubits_used}")
    print(f"  - Tiempo promedio: {metrics.average_execution_time:.3f}s")
    
    await quantum_module.shutdown()
    print("\n‚úÖ Algoritmos cu√°nticos avanzados completados\n")


async def ejemplo_integracion_sistema():
    """Ejemplo de integraci√≥n con otros m√≥dulos del sistema"""
    print("üîó Ejemplo de Integraci√≥n con Sistema Blaze AI")
    print("=" * 55)
    
    # Crear m√≥dulo con integraci√≥n completa
    quantum_module = create_quantum_computing_module(
        hybrid_integration=True,
        post_quantum_crypto=True,
        quantum_ml_enabled=True,
        backend_type=QuantumBackendType.HYBRID
    )
    
    await quantum_module.initialize()
    
    # Simular integraci√≥n con otros m√≥dulos
    print("üîó Simulando integraci√≥n con m√≥dulos del sistema...")
    
    # Integraci√≥n con ML cl√°sico
    print("  üìä Integrando con m√≥dulo de ML...")
    classical_ml_data = {
        "model_type": "neural_network",
        "data_size": 10000,
        "features": 128,
        "target": "classification"
    }
    
    # Integraci√≥n con blockchain
    print("  ‚õìÔ∏è Integrando con m√≥dulo de blockchain...")
    blockchain_data = {
        "transaction_type": "quantum_optimization",
        "smart_contract": "quantum_optimizer_v1",
        "gas_limit": 5000000
    }
    
    # Integraci√≥n con edge computing
    print("  üåê Integrando con m√≥dulo de edge computing...")
    edge_data = {
        "node_type": "quantum_edge",
        "processing_capacity": "hybrid",
        "latency_requirement": "ultra_low"
    }
    
    # Crear circuito integrado
    circuit_id = await quantum_module.create_circuit(
        name="circuito_integrado",
        qubits=32,
        operations=["H(0)", "X(1)", "CX(0,1)", "H(2)", "RY(3)", "CNOT(2,3)"]
    )
    
    # Ejecutar optimizaci√≥n integrada
    print("üöÄ Ejecutando optimizaci√≥n integrada...")
    
    integrated_result = await quantum_module.hybrid_optimization(
        classical_problem={
            "ml_data": classical_ml_data,
            "blockchain_data": blockchain_data,
            "edge_data": edge_data,
            "size": 32,
            "constraints": ["ml_compatibility", "blockchain_verification", "edge_optimization"]
        },
        quantum_parameters={
            "size": 32,
            "depth": 4,
            "hybrid_mode": True,
            "integration_level": "full"
        }
    )
    
    print("üéØ Resultado de integraci√≥n:")
    print(f"  - Tiempo total: {integrated_result['execution_time']:.3f}s")
    print(f"  - Ventaja h√≠brida: {integrated_result['hybrid_advantage']:.3f}")
    print(f"  - Validaci√≥n cl√°sica: {integrated_result['final_result']['classical_validation']}")
    print(f"  - Ventaja cu√°ntica verificada: {integrated_result['final_result']['quantum_advantage_verified']}")
    
    # Estado de salud del m√≥dulo
    health = await quantum_module.get_health_status()
    print(f"\nüè• Estado de salud del m√≥dulo:")
    print(f"  - Estado: {health['status']}")
    print(f"  - Circuitos: {health['circuits_count']}")
    print(f"  - Trabajos activos: {health['active_jobs']}")
    print(f"  - Librer√≠as cu√°nticas: {'Disponibles' if health['quantum_libraries_available'] else 'Simuladas'}")
    print(f"  - PennyLane: {'Disponible' if health['pennylane_available'] else 'No disponible'}")
    
    await quantum_module.shutdown()
    print("\n‚úÖ Integraci√≥n con sistema completada\n")


async def main():
    """Funci√≥n principal que ejecuta todos los ejemplos"""
    print("üåê SISTEMA BLAZE AI - M√ìDULO DE QUANTUM COMPUTING")
    print("=" * 60)
    print("Ejecutando ejemplos de computaci√≥n cu√°ntica...\n")
    
    try:
        # Ejecutar ejemplos secuencialmente
        await ejemplo_basico_quantum()
        await ejemplo_optimizacion_hibrida()
        await ejemplo_machine_learning_cuantico()
        await ejemplo_criptografia_post_cuantica()
        await ejemplo_algoritmos_cuanticos_avanzados()
        await ejemplo_integracion_sistema()
        
        print("üéâ ¬°Todos los ejemplos de Quantum Computing ejecutados exitosamente!")
        print("üöÄ El sistema Blaze AI ahora tiene capacidades cu√°nticas avanzadas")
        
    except Exception as e:
        print(f"‚ùå Error ejecutando ejemplos: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # Ejecutar ejemplos
    asyncio.run(main())

