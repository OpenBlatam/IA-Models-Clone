version: '3.8'

services:
  # NotebookLM AI Application
  notebooklm-ai:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: notebooklm-ai-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NOTEBOOKLM_HOST=0.0.0.0
      - NOTEBOOKLM_PORT=8000
      - NOTEBOOKLM_WORKERS=4
      - NOTEBOOKLM_MODEL_NAME=microsoft/DialoGPT-medium
      - NOTEBOOKLM_MAX_LENGTH=2048
      - NOTEBOOKLM_TEMPERATURE=0.7
      - NOTEBOOKLM_USE_QUANTIZATION=true
      - NOTEBOOKLM_DEVICE=auto
      - NOTEBOOKLM_SECRET_KEY=${NOTEBOOKLM_SECRET_KEY:-your-secret-key-change-in-production}
      - NOTEBOOKLM_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - NOTEBOOKLM_REDIS_URL=redis://redis:6379
      - NOTEBOOKLM_DB_URL=postgresql://notebooklm:password@postgres:5432/notebooklm
      - NOTEBOOKLM_ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: notebooklm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=notebooklm
      - POSTGRES_USER=notebooklm
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: notebooklm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: notebooklm-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: notebooklm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - notebooklm-ai
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: notebooklm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: notebooklm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ELK Stack - Elasticsearch (already defined above)
  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: notebooklm-logstash
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - notebooklm-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: notebooklm-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - notebooklm-network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: notebooklm-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: notebooklm-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # pgAdmin (Web UI for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: notebooklm-pgadmin
    restart: unless-stopped
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@notebooklm.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - notebooklm-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  notebooklm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 