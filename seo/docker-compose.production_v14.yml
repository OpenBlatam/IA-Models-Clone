# Ultra-Optimized SEO Service v14 - MAXIMUM PERFORMANCE
# Docker Compose with advanced services, monitoring, and load balancing

version: '3.8'

services:
  # Main SEO Service - Ultra Fast
  seo-service:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: final
    image: ultra-seo-service-v14:latest
    container_name: ultra-seo-service-v14
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - WORKERS=16
      - HOST=0.0.0.0
      - PORT=8000
      - PYTHONOPTIMIZE=2
      - PYTHONHASHSEED=random
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      - redis
      - nginx
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache - Ultra Fast
  redis:
    image: redis:7.2-alpine
    container_name: ultra-seo-redis-v14
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.optimized.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer - Ultra Fast
  nginx:
    image: nginx:1.25-alpine
    container_name: ultra-seo-nginx-v14
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.optimized.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - seo-service
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultra-seo-prometheus-v14
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ultra-seo-grafana-v14
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ultra-seo-jaeger-v14
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Celery Worker - Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: production
    container_name: ultra-seo-celery-v14
    restart: unless-stopped
    command: celery -A main_production_v14_ultra worker --loglevel=info --concurrency=8
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Celery Scheduler
  celery-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: production
    container_name: ultra-seo-scheduler-v14
    restart: unless-stopped
    command: celery -A main_production_v14_ultra beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Flower Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: production
    container_name: ultra-seo-flower-v14
    restart: unless-stopped
    ports:
      - "5555:5555"
    command: celery -A main_production_v14_ultra flower --port=5555
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Testing Service
  testing:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: testing
    container_name: ultra-seo-testing-v14
    restart: "no"
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Development Service
  development:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: dev
    container_name: ultra-seo-dev-v14
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DEBUG=true
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Profiling Service
  profiling:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: profiling
    container_name: ultra-seo-profiling-v14
    restart: "no"
    ports:
      - "8002:8000"
    environment:
      - ENVIRONMENT=profiling
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./profiles:/app/profiles
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Security Scanning
  security:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: security
    container_name: ultra-seo-security-v14
    restart: "no"
    volumes:
      - .:/app
      - ./security-reports:/app/security-reports
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Load Testing
  load-testing:
    build:
      context: .
      dockerfile: Dockerfile.production_v14
      target: load-testing
    container_name: ultra-seo-load-test-v14
    restart: "no"
    ports:
      - "8089:8089"
    environment:
      - LOCUST_HOST=http://seo-service:8000
    depends_on:
      - seo-service
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # InfluxDB for Load Test Results
  influxdb:
    image: influxdb:2.7-alpine
    container_name: ultra-seo-influxdb-v14
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=seo-org
      - DOCKER_INFLUXDB_INIT_BUCKET=seo-metrics
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Backup Service
  backup:
    image: alpine:latest
    container_name: ultra-seo-backup-v14
    restart: "no"
    volumes:
      - redis-data:/data/redis
      - prometheus-data:/data/prometheus
      - grafana-data:/data/grafana
      - influxdb-data:/data/influxdb
      - ./backups:/backups
    command: |
      sh -c "
        echo 'Creating backup...' &&
        tar -czf /backups/seo-backup-$(date +%Y%m%d-%H%M%S).tar.gz /data &&
        echo 'Backup completed'
      "
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  influxdb-data:
    driver: local

networks:
  seo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 