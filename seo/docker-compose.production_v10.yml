version: '3.8'

services:
  # Ultra-Fast SEO Service
  seo-service:
    build:
      context: .
      dockerfile: Dockerfile.production_v10
      target: production
    container_name: seo-service-v10
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CACHE_ENABLED=true
      - CACHE_TTL=3600
      - CACHE_MAXSIZE=10000
      - HTTP_TIMEOUT=30.0
      - HTTP_RETRY_ATTEMPTS=3
      - MAX_URLS_PER_BATCH=50
      - ANALYSIS_TIMEOUT=60.0
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_ENABLED=true
      - METRICS_ENABLED=true
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: seo-redis-v10
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.optimized.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: seo-nginx-v10
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.optimized.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - seo-service
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: seo-prometheus-v10
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: seo-grafana-v10
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Celery worker for background tasks (optional)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production_v10
      target: production
    container_name: seo-celery-worker-v10
    restart: unless-stopped
    command: celery -A shared.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - CELERY_ENABLED=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery beat for scheduled tasks (optional)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production_v10
      target: production
    container_name: seo-celery-beat-v10
    restart: unless-stopped
    command: celery -A shared.core.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - CELERY_ENABLED=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  seo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 