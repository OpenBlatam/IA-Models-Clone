# Ultra-Optimized SEO Service Docker Compose v8
# Maximum performance production stack with advanced monitoring

version: '3.8'

services:
  # Ultra-fast SEO service
  seo-service:
    build:
      context: .
      dockerfile: production/Dockerfile.ultra_optimized_v8
      target: production
    container_name: ultra-seo-service-v8
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=4
      - MAX_CONNECTIONS=200
      - CACHE_TTL=3600
      - MAX_CACHE_SIZE=10000
      - PREFERRED_PARSER=selectolax
      - COMPRESSION_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./temp:/app/temp
    depends_on:
      - redis
      - postgres
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Ultra-fast Redis cluster
  redis:
    image: redis:7-alpine
    container_name: ultra-redis-v8
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --tcp-backlog 1024
      --timeout 0
      --databases 32
      --appendonly yes
      --appendfsync everysec
      --no-appendfsync-on-rewrite
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 128mb
      --requirepass ${REDIS_PASSWORD:-ultra_seo_redis_v8}
    volumes:
      - redis-data:/data
      - ./production/redis.ultra_optimized.conf:/usr/local/etc/redis/redis.conf
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ultra-postgres-v8
    restart: unless-stopped
    environment:
      POSTGRES_DB: seo_analysis
      POSTGRES_USER: seo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ultra_seo_postgres_v8}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./production/postgres.ultra_optimized.conf:/etc/postgresql/postgresql.conf
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seo_user -d seo_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ultra-fast Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ultra-nginx-v8
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./production/nginx.ultra_optimized.conf:/etc/nginx/nginx.conf
      - ./production/ssl:/etc/nginx/ssl
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - seo-service
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy load balancer
  haproxy:
    image: haproxy:2.8-alpine
    container_name: ultra-haproxy-v8
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./production/haproxy.ultra_optimized.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - seo-service
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultra-prometheus-v8
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./production/prometheus.ultra_optimized.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ultra-grafana-v8
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-ultra_seo_grafana_v8}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./production/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./production/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultra-elasticsearch-v8
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ultra-kibana-v8
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: ultra-filebeat-v8
    restart: unless-stopped
    user: root
    volumes:
      - ./production/filebeat.ultra_optimized.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/seo:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Alertmanager for notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ultra-alertmanager-v8
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./production/alertmanager.ultra_optimized.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.listen-address=:9093'
    networks:
      - seo-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Backup service
  backup:
    image: alpine:latest
    container_name: ultra-backup-v8
    restart: "no"
    volumes:
      - postgres-data:/var/lib/postgresql/data:ro
      - redis-data:/data:ro
      - ./backups:/backups
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=seo_analysis
      - POSTGRES_USER=seo_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ultra_seo_postgres_v8}
    networks:
      - seo-network
    command: >
      sh -c "
        apk add --no-cache postgresql-client &&
        pg_dump -h postgres -U seo_user -d seo_analysis > /backups/postgres_$(date +%Y%m%d_%H%M%S).sql &&
        redis-cli -h redis -a ${REDIS_PASSWORD:-ultra_seo_redis_v8} BGSAVE &&
        echo 'Backup completed at $(date)'
      "

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  seo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 