"""
Advanced Demo for AI History Comparison System
Demo avanzado para el sistema de an√°lisis de historial de IA
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def demo_advanced_system():
    """
    Demostraci√≥n completa del sistema avanzado
    """
    print("üöÄ Demo del Sistema Avanzado de An√°lisis de Historial de IA")
    print("=" * 70)
    
    # ============================================================================
    # DEMO 1: Evaluaci√≥n de Calidad de Texto
    # ============================================================================
    print(f"\nüìä Demo 1: Evaluaci√≥n Avanzada de Calidad de Texto")
    print("-" * 50)
    
    try:
        from text_quality_evaluator import AdvancedTextQualityEvaluator, QualityDimension
        
        # Inicializar evaluador
        quality_evaluator = AdvancedTextQualityEvaluator()
        
        # Textos de ejemplo para evaluar
        sample_texts = [
            {
                "id": "high_quality",
                "content": """
                La inteligencia artificial representa una revoluci√≥n tecnol√≥gica sin precedentes. 
                Los algoritmos de machine learning pueden procesar grandes vol√∫menes de datos 
                y extraer patrones complejos que los humanos no podr√≠an detectar f√°cilmente.
                
                Sin embargo, es crucial considerar las implicaciones √©ticas de estas tecnolog√≠as. 
                Debemos asegurarnos de que la IA se implemente de manera responsable y justa, 
                considerando el impacto en la sociedad y el medio ambiente.
                
                En conclusi√≥n, la IA ofrece oportunidades extraordinarias, pero requiere 
                un enfoque equilibrado que priorice el bienestar humano.
                """
            },
            {
                "id": "medium_quality",
                "content": """
                La IA es muy importante. Hay muchos algoritmos que pueden hacer cosas. 
                Es bueno usar la IA para diferentes tareas. Algunas veces funciona bien 
                y otras veces no tanto. Los desarrolladores trabajan mucho en esto.
                
                Es importante pensar en la √©tica. La IA puede ser √∫til pero tambi√©n 
                puede causar problemas. Hay que tener cuidado al usarla.
                """
            },
            {
                "id": "low_quality",
                "content": """
                IA es genial. Algoritmos hacen cosas. Machine learning es cool. 
                Datos son importantes. IA puede ayudar. Es el futuro. 
                Muy bueno para todo. Recomiendo usar IA. Es incre√≠ble.
                """
            }
        ]
        
        # Evaluar calidad de cada texto
        for text_data in sample_texts:
            print(f"  üìù Evaluando: {text_data['id']}")
            
            report = await quality_evaluator.evaluate_text_quality(
                text=text_data["content"],
                document_id=text_data["id"]
            )
            
            print(f"    ‚Ä¢ Score general: {report.overall_score:.2f}")
            print(f"    ‚Ä¢ Nivel de calidad: {report.quality_level.value}")
            print(f"    ‚Ä¢ Fortalezas: {len(report.strengths)}")
            print(f"    ‚Ä¢ Debilidades: {len(report.weaknesses)}")
            print(f"    ‚Ä¢ Recomendaciones: {len(report.recommendations)}")
            
            # Mostrar algunas recomendaciones
            if report.recommendations:
                print(f"    ‚Ä¢ Ejemplo de recomendaci√≥n: {report.recommendations[0]}")
        
        print(f"\n‚úÖ Evaluaci√≥n de calidad completada para {len(sample_texts)} textos")
        
    except Exception as e:
        print(f"‚ùå Error en evaluaci√≥n de calidad: {e}")
    
    # ============================================================================
    # DEMO 2: Generaci√≥n Inteligente de Contenido
    # ============================================================================
    print(f"\nü§ñ Demo 2: Generaci√≥n Inteligente de Contenido")
    print("-" * 50)
    
    try:
        from intelligent_content_generator import IntelligentContentGenerator, ContentRequest, ContentType, ContentStyle, ContentTone
        
        # Inicializar generador
        content_generator = IntelligentContentGenerator()
        
        # Solicitudes de contenido
        content_requests = [
            ContentRequest(
                topic="Inteligencia Artificial en la Medicina",
                content_type=ContentType.ARTICLE,
                style=ContentStyle.TECHNICAL,
                tone=ContentTone.PROFESSIONAL,
                target_audience="m√©dicos y profesionales de la salud",
                word_count=800,
                keywords=["IA", "medicina", "diagn√≥stico", "tratamiento", "salud"],
                requirements=["Incluir ejemplos espec√≠ficos", "Mencionar beneficios y riesgos"]
            ),
            ContentRequest(
                topic="C√≥mo Aprender Machine Learning",
                content_type=ContentType.TUTORIAL,
                style=ContentStyle.INFORMATIVE,
                tone=ContentTone.FRIENDLY,
                target_audience="principiantes en programaci√≥n",
                word_count=600,
                keywords=["machine learning", "aprendizaje", "programaci√≥n", "datos", "algoritmos"],
                requirements=["Paso a paso", "Recursos recomendados", "Ejemplos pr√°cticos"]
            )
        ]
        
        # Generar contenido
        for i, request in enumerate(content_requests):
            print(f"  üìù Generando contenido {i+1}: {request.topic}")
            
            generated_content = await content_generator.generate_content(request)
            
            print(f"    ‚Ä¢ ID: {generated_content.id}")
            print(f"    ‚Ä¢ Palabras generadas: {generated_content.metadata['word_count']}")
            print(f"    ‚Ä¢ Secciones: {generated_content.metadata['section_count']}")
            print(f"    ‚Ä¢ Score de calidad: {generated_content.quality_score:.2f}")
            print(f"    ‚Ä¢ Plantilla usada: {generated_content.metadata['template_used']}")
            
            # Mostrar preview del contenido
            content_preview = generated_content.content[:200] + "..." if len(generated_content.content) > 200 else generated_content.content
            print(f"    ‚Ä¢ Preview: {content_preview}")
        
        # Obtener resumen
        summary = await content_generator.get_content_summary()
        print(f"\n  üìä Resumen de generaci√≥n:")
        print(f"    ‚Ä¢ Total contenido generado: {summary['total_content_generated']}")
        print(f"    ‚Ä¢ Score promedio de calidad: {summary['average_quality_score']:.2f}")
        print(f"    ‚Ä¢ Plantillas disponibles: {summary['templates_available']}")
        
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n de contenido: {e}")
    
    # ============================================================================
    # DEMO 3: An√°lisis de Tendencias y Predicciones
    # ============================================================================
    print(f"\nüìà Demo 3: An√°lisis de Tendencias y Predicciones")
    print("-" * 50)
    
    try:
        from trend_analyzer import AdvancedTrendAnalyzer, PredictionType
        
        # Inicializar analizador de tendencias
        trend_analyzer = AdvancedTrendAnalyzer()
        
        # Generar datos hist√≥ricos simulados
        historical_data = {}
        base_date = datetime.now() - timedelta(days=30)
        
        # Simular m√©tricas con diferentes tendencias
        metrics_data = {
            "quality_score": {"base": 0.7, "trend": 0.01, "volatility": 0.05},
            "user_satisfaction": {"base": 0.8, "trend": 0.005, "volatility": 0.03},
            "processing_time": {"base": 2.0, "trend": -0.02, "volatility": 0.1},
            "error_rate": {"base": 0.02, "trend": -0.001, "volatility": 0.01}
        }
        
        for metric_name, config in metrics_data.items():
            data_points = []
            for i in range(30):
                date = base_date + timedelta(days=i)
                # Simular valor con tendencia y ruido
                value = config["base"] + (config["trend"] * i) + (config["volatility"] * (i % 7 - 3))
                data_points.append({
                    "timestamp": date,
                    "value": max(0, value)  # Asegurar valores positivos
                })
            historical_data[metric_name] = data_points
        
        # Analizar tendencias
        print("  üîç Analizando tendencias...")
        trends = await trend_analyzer.analyze_trends(historical_data)
        
        for metric_name, trend in trends.items():
            print(f"    ‚Ä¢ {metric_name}:")
            print(f"      - Tipo de tendencia: {trend.trend_type.value}")
            print(f"      - Confianza: {trend.confidence:.2f}")
            print(f"      - Volatilidad: {trend.volatility:.2f}")
            print(f"      - R¬≤: {trend.r_squared:.2f}")
        
        # Generar predicciones
        print("\n  üîÆ Generando predicciones...")
        predictions = {}
        for metric_name in ["quality_score", "user_satisfaction"]:
            prediction = await trend_analyzer.generate_predictions(
                metric_name=metric_name,
                prediction_type=PredictionType.SHORT_TERM
            )
            predictions[metric_name] = prediction
            
            print(f"    ‚Ä¢ {metric_name}:")
            print(f"      - Nivel de confianza: {prediction.confidence_level.value}")
            print(f"      - Score de confianza: {prediction.confidence_score:.2f}")
            print(f"      - Modelo usado: {prediction.model_used}")
            print(f"      - Valores predichos: {len(prediction.predicted_values)}")
        
        # Generar insights
        print("\n  üí° Generando insights...")
        insights = await trend_analyzer.generate_insights(trends)
        
        for insight in insights[:3]:  # Mostrar solo los primeros 3
            print(f"    ‚Ä¢ {insight.title}")
            print(f"      - Impacto: {insight.impact_level}")
            print(f"      - Confianza: {insight.confidence:.2f}")
            print(f"      - Recomendaciones: {len(insight.actionable_recommendations)}")
        
        # Obtener resumen
        summary = await trend_analyzer.get_trend_summary()
        print(f"\n  üìä Resumen de an√°lisis:")
        print(f"    ‚Ä¢ M√©tricas analizadas: {summary['total_metrics_analyzed']}")
        print(f"    ‚Ä¢ Predicciones generadas: {summary['total_predictions']}")
        print(f"    ‚Ä¢ Insights generados: {summary['total_insights']}")
        print(f"    ‚Ä¢ Confianza promedio: {summary['average_confidence']:.2f}")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de tendencias: {e}")
    
    # ============================================================================
    # DEMO 4: Dashboard Avanzado
    # ============================================================================
    print(f"\nüìä Demo 4: Dashboard Avanzado Interactivo")
    print("-" * 50)
    
    try:
        from advanced_dashboard import AdvancedDashboard, DashboardWidget, ChartType, DashboardTheme
        
        # Inicializar dashboard
        dashboard = AdvancedDashboard()
        
        # Crear widgets de ejemplo
        widgets_data = [
            {
                "id": "quality_trend",
                "title": "Tendencia de Calidad",
                "chart_type": ChartType.LINE,
                "data": {
                    "x": [f"D√≠a {i}" for i in range(1, 31)],
                    "y": [0.7 + 0.01*i + 0.05*(i%7-3) for i in range(30)],
                    "labels": {"x": "D√≠as", "y": "Score de Calidad"}
                }
            },
            {
                "id": "user_satisfaction",
                "title": "Satisfacci√≥n del Usuario",
                "chart_type": ChartType.BAR,
                "data": {
                    "x": ["Enero", "Febrero", "Marzo", "Abril", "Mayo"],
                    "y": [0.75, 0.82, 0.78, 0.85, 0.88],
                    "labels": {"x": "Mes", "y": "Satisfacci√≥n"}
                }
            },
            {
                "id": "error_distribution",
                "title": "Distribuci√≥n de Errores",
                "chart_type": ChartType.PIE,
                "data": {
                    "labels": ["Errores de Red", "Errores de Validaci√≥n", "Errores de Sistema", "Otros"],
                    "values": [25, 35, 20, 20]
                }
            },
            {
                "id": "performance_metrics",
                "title": "M√©tricas de Rendimiento",
                "chart_type": ChartType.HEATMAP,
                "data": {
                    "x": ["CPU", "Memoria", "Disco", "Red"],
                    "y": ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes"],
                    "z": [[80, 75, 85, 70], [65, 70, 75, 68], [90, 85, 88, 92], [45, 50, 48, 52], [60, 65, 62, 58]]
                }
            }
        ]
        
        # Crear widgets
        created_widgets = []
        for widget_data in widgets_data:
            widget = await dashboard.create_widget(
                widget_id=widget_data["id"],
                title=widget_data["title"],
                chart_type=widget_data["chart_type"],
                data=widget_data["data"]
            )
            created_widgets.append(widget)
            print(f"  üìä Widget creado: {widget.title}")
        
        # Agregar widgets al layout principal
        for i, widget in enumerate(created_widgets):
            await dashboard.add_widget_to_layout(
                layout_id="main",
                widget_id=widget.id,
                position=(i % 2, i // 2),
                size=(1, 1)
            )
        
        # Generar dashboard HTML
        print("  üåê Generando dashboard HTML...")
        dashboard_html = await dashboard.generate_dashboard_html("main", DashboardTheme.LIGHT)
        
        # Guardar dashboard
        with open("exports/advanced_dashboard.html", "w", encoding="utf-8") as f:
            f.write(dashboard_html)
        
        print("  ‚úÖ Dashboard generado y guardado en exports/advanced_dashboard.html")
        
        # Obtener resumen del dashboard
        summary = await dashboard.get_dashboard_summary()
        print(f"\n  üìä Resumen del dashboard:")
        print(f"    ‚Ä¢ Layouts disponibles: {summary['total_layouts']}")
        print(f"    ‚Ä¢ Widgets creados: {summary['total_widgets']}")
        print(f"    ‚Ä¢ Temas disponibles: {len(summary['available_themes'])}")
        print(f"    ‚Ä¢ Formatos de exportaci√≥n: {len(summary['export_formats'])}")
        
    except Exception as e:
        print(f"‚ùå Error en dashboard: {e}")
    
    # ============================================================================
    # DEMO 5: Integraciones Externas
    # ============================================================================
    print(f"\nüîó Demo 5: Integraciones Externas")
    print("-" * 50)
    
    try:
        from external_integrations import ExternalIntegrations, IntegrationType
        
        # Inicializar integraciones
        integrations = ExternalIntegrations()
        
        # Mostrar integraciones disponibles
        status = await integrations.get_integration_status()
        print(f"  üìã Integraciones disponibles: {status['total_integrations']}")
        
        for integration_id, integration_info in status['integrations'].items():
            print(f"    ‚Ä¢ {integration_info['name']} ({integration_info['type']})")
            print(f"      - Estado: {integration_info['status']}")
            print(f"      - Rate limit: {integration_info['rate_limit']}/min")
        
        # Simular configuraci√≥n de integraci√≥n (sin claves reales)
        print("\n  ‚öôÔ∏è Simulando configuraci√≥n de integraciones...")
        
        # Configurar Slack (simulado)
        slack_configured = await integrations.configure_integration(
            integration_id="slack",
            api_key="xoxb-simulated-token",
            custom_headers={"Content-Type": "application/json"}
        )
        print(f"    ‚Ä¢ Slack configurado: {'‚úÖ' if slack_configured else '‚ùå'}")
        
        # Configurar Discord (simulado)
        discord_configured = await integrations.configure_integration(
            integration_id="discord",
            api_key="simulated-bot-token"
        )
        print(f"    ‚Ä¢ Discord configurado: {'‚úÖ' if discord_configured else '‚ùå'}")
        
        # Simular env√≠o de notificaci√≥n
        print("\n  üì§ Simulando env√≠o de notificaciones...")
        
        notification_sent = await integrations.send_notification(
            service="slack",
            message="üöÄ Sistema de an√°lisis de historial de IA funcionando correctamente",
            channel="#ai-monitoring",
            title="Estado del Sistema"
        )
        print(f"    ‚Ä¢ Notificaci√≥n Slack enviada: {'‚úÖ' if notification_sent else '‚ùå'}")
        
        # Obtener estad√≠sticas de cache y rate limiting
        print(f"\n  üìä Estad√≠sticas del sistema:")
        print(f"    ‚Ä¢ Respuestas en cache: {status['cache_stats']['cached_responses']}")
        print(f"    ‚Ä¢ TTL del cache: {status['cache_stats']['cache_ttl']}s")
        print(f"    ‚Ä¢ Integraciones activas: {status['active_integrations']}")
        
    except Exception as e:
        print(f"‚ùå Error en integraciones: {e}")
    
    # ============================================================================
    # DEMO 6: Sistema de Monitoreo
    # ============================================================================
    print(f"\nüì° Demo 6: Sistema de Monitoreo Avanzado")
    print("-" * 50)
    
    try:
        from monitoring_system import AdvancedMonitoringSystem, AlertLevel, MetricType
        
        # Inicializar sistema de monitoreo
        monitoring = AdvancedMonitoringSystem()
        
        # Iniciar monitoreo
        await monitoring.start_monitoring()
        print("  üöÄ Sistema de monitoreo iniciado")
        
        # Simular algunas m√©tricas de aplicaci√≥n
        print("  üìä Simulando m√©tricas de aplicaci√≥n...")
        
        for i in range(10):
            # Simular m√©tricas
            await monitoring._record_metric("application.response_time", 1.5 + (i * 0.1), MetricType.GAUGE)
            await monitoring._record_metric("application.error_rate", 0.02 + (i * 0.001), MetricType.GAUGE)
            await monitoring._record_metric("application.requests_per_second", 100 + (i * 5), MetricType.GAUGE)
            
            await asyncio.sleep(0.1)  # Peque√±a pausa
        
        # Obtener estado de salud del sistema
        health = await monitoring.get_system_health()
        print(f"\n  üíö Estado de salud del sistema:")
        print(f"    ‚Ä¢ Estado general: {health.overall_status}")
        print(f"    ‚Ä¢ Uso de CPU: {health.cpu_usage:.1f}%")
        print(f"    ‚Ä¢ Uso de memoria: {health.memory_usage:.1f}%")
        print(f"    ‚Ä¢ Uso de disco: {health.disk_usage:.1f}%")
        print(f"    ‚Ä¢ Alertas activas: {health.active_alerts}")
        print(f"    ‚Ä¢ M√©tricas totales: {health.total_metrics}")
        print(f"    ‚Ä¢ Tiempo activo: {health.uptime:.1f}s")
        
        # Obtener resumen de m√©tricas
        metrics_summary = await monitoring.get_metrics_summary()
        print(f"\n  üìà Resumen de m√©tricas:")
        print(f"    ‚Ä¢ Total de m√©tricas: {metrics_summary['total_metrics']}")
        print(f"    ‚Ä¢ M√©tricas por tipo: {metrics_summary['metrics_by_type']}")
        print(f"    ‚Ä¢ M√©tricas recientes: {len(metrics_summary['recent_metrics'])}")
        
        # Obtener resumen de alertas
        alerts_summary = await monitoring.get_alerts_summary()
        print(f"\n  üö® Resumen de alertas:")
        print(f"    ‚Ä¢ Alertas activas: {alerts_summary['active_alerts']}")
        print(f"    ‚Ä¢ Reglas de alerta: {alerts_summary['total_alert_rules']}")
        print(f"    ‚Ä¢ Reglas habilitadas: {alerts_summary['enabled_rules']}")
        print(f"    ‚Ä¢ Distribuci√≥n por nivel: {alerts_summary['alert_levels']}")
        
        # Detener monitoreo
        await monitoring.stop_monitoring()
        print("  üõë Sistema de monitoreo detenido")
        
    except Exception as e:
        print(f"‚ùå Error en sistema de monitoreo: {e}")
    
    # ============================================================================
    # RESUMEN FINAL
    # ============================================================================
    print(f"\nüéâ Demo Avanzado Completado Exitosamente!")
    print("=" * 70)
    
    print(f"üìä Resumen del Demo Avanzado:")
    print(f"  ‚úÖ Evaluaci√≥n de calidad de texto")
    print(f"  ‚úÖ Generaci√≥n inteligente de contenido")
    print(f"  ‚úÖ An√°lisis de tendencias y predicciones")
    print(f"  ‚úÖ Dashboard avanzado interactivo")
    print(f"  ‚úÖ Integraciones externas")
    print(f"  ‚úÖ Sistema de monitoreo avanzado")
    
    print(f"\nüöÄ El sistema avanzado est√° completamente operativo!")
    print(f"   - Evaluaci√≥n de calidad con 10 dimensiones")
    print(f"   - Generaci√≥n de contenido con plantillas inteligentes")
    print(f"   - An√°lisis de tendencias con predicciones ML")
    print(f"   - Dashboard interactivo con m√∫ltiples gr√°ficos")
    print(f"   - Integraciones con servicios externos")
    print(f"   - Monitoreo en tiempo real con alertas")
    print(f"   - Exportaci√≥n de datos en m√∫ltiples formatos")
    
    print(f"\nüìÅ Archivos generados:")
    print(f"   - exports/advanced_dashboard.html")
    print(f"   - exports/quality_reports_*.json")
    print(f"   - exports/trend_analysis_*.json")
    print(f"   - exports/monitoring_data_*.json")

async def demo_integration_workflow():
    """
    Demo de flujo de trabajo integrado
    """
    print("\nüîÑ Demo de Flujo de Trabajo Integrado")
    print("=" * 50)
    
    try:
        # Simular flujo completo
        print("1. üìù Generando contenido con IA...")
        await asyncio.sleep(1)
        
        print("2. üìä Evaluando calidad del contenido...")
        await asyncio.sleep(1)
        
        print("3. üìà Analizando tendencias de calidad...")
        await asyncio.sleep(1)
        
        print("4. üö® Verificando alertas del sistema...")
        await asyncio.sleep(1)
        
        print("5. üì§ Enviando notificaciones...")
        await asyncio.sleep(1)
        
        print("6. üìä Actualizando dashboard...")
        await asyncio.sleep(1)
        
        print("‚úÖ Flujo de trabajo completado exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error en flujo de trabajo: {e}")

if __name__ == "__main__":
    # Ejecutar demo principal
    asyncio.run(demo_advanced_system())
    
    # Ejecutar demo de flujo integrado
    asyncio.run(demo_integration_workflow())

























