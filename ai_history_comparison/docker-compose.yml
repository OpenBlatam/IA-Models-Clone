# AI History Comparison System - Enhanced Docker Compose

version: '3.8'

services:
  # Main AI History Comparison Application
  ai-history-app:
    build: .
    container_name: ai-history-comparison
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://ai_history_user:ai_history_pass@postgres:5432/ai_history
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - ENABLE_REALTIME=true
    volumes:
      - ./models:/app/models
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-history-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-history-postgres
    environment:
      - POSTGRES_DB=ai_history
      - POSTGRES_USER=ai_history_user
      - POSTGRES_PASSWORD=ai_history_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ai-history-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_history_user -d ai_history"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-history-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ai-history-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-history-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ai-history-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-history-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - ai-history-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-history-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./exports:/var/www/exports:ro
    depends_on:
      - ai-history-app
    restart: unless-stopped
    networks:
      - ai-history-network
    profiles:
      - production

  # Celery Worker for Background Tasks
  celery-worker:
    build: .
    container_name: ai-history-celery-worker
    command: celery -A ai_history_comparison.tasks worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://ai_history_user:ai_history_pass@postgres:5432/ai_history
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./models:/app/models
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - ai-history-network
    profiles:
      - production

  # Celery Beat Scheduler
  celery-beat:
    build: .
    container_name: ai-history-celery-beat
    command: celery -A ai_history_comparison.tasks beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://ai_history_user:ai_history_pass@postgres:5432/ai_history
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - ai-history-network
    profiles:
      - production

  # Flower Celery Monitoring
  flower:
    build: .
    container_name: ai-history-flower
    command: celery -A ai_history_comparison.tasks flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ai-history-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-history-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16