version: '3.9'

services:
  # Inference API
  inference-api:
    build:
      context: ../..
      dockerfile: inference/Dockerfile
    container_name: frontier-inference-api
    ports:
      - "8080:8080"
    environment:
      - TRUTHGPT_API_TOKEN=${TRUTHGPT_API_TOKEN:-changeme}
      - TRUTHGPT_CONFIG=/app/configs/llm_default.yaml
      - PORT=8080
      - ENVIRONMENT=production
      - BATCH_MAX_SIZE=32
      - BATCH_FLUSH_TIMEOUT_MS=20
      - RATE_LIMIT_RPM=600
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
      - CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - ENABLE_STRUCTURED_LOGGING=true
      - OTLP_ENDPOINT=${OTLP_ENDPOINT:-}
      - WEBHOOK_HMAC_SECRET=${WEBHOOK_HMAC_SECRET:-changeme-secret}
    volumes:
      - ./configs:/app/configs:ro
      - ./models:/app/models:ro
    depends_on:
      - redis
      - prometheus
    networks:
      - inference-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: frontier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - inference-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: frontier-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - inference-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: frontier-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - inference-network
    restart: unless-stopped

  # OpenTelemetry Collector (optional)
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: frontier-otel-collector
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    volumes:
      - ./otel-collector-config.yml:/etc/otelcol/config.yml:ro
    command: ["--config=/etc/otelcol/config.yml"]
    networks:
      - inference-network
    restart: unless-stopped
    profiles:
      - tracing

networks:
  inference-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:


