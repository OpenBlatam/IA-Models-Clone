"""
Advanced HTML report generator for test results
"""

import json
from typing import Dict, Any, List
from pathlib import Path
from datetime import datetime


class HTMLReportGenerator:
    """Generate beautiful HTML reports for test results"""
    
    def __init__(self):
        self.template = self._load_template()
        
    def _load_template(self) -> str:
        """Load HTML template"""
        return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TruthGPT Test Report</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { opacity: 0.9; font-size: 1.1em; }
        .content { padding: 30px; }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        .stat-card h3 {
            color: #667eea;
            font-size: 2em;
            margin-bottom: 5px;
        }
        .stat-card p { color: #666; }
        .progress-bar {
            background: #e9ecef;
            height: 30px;
            border-radius: 15px;
            overflow: hidden;
            margin: 20px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.5s;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        .test-results { margin-top: 30px; }
        .test-item {
            background: #f8f9fa;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .test-name { font-weight: 600; }
        .test-status {
            padding: 5px 15px;
            border-radius: 20px;
            color: white;
            font-size: 0.9em;
        }
        .status-passed { background: #28a745; }
        .status-failed { background: #dc3545; }
        .status-error { background: #ffc107; }
        .footer {
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ TruthGPT Optimization Core</h1>
            <p>Comprehensive Test Report</p>
            <p>{timestamp}</p>
        </div>
        <div class="content">
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>{total_tests}</h3>
                    <p>Total Tests</p>
                </div>
                <div class="stat-card">
                    <h3>{passed_tests}</h3>
                    <p>Passed</p>
                </div>
                <div class="stat-card">
                    <h3>{failed_tests}</h3>
                    <p>Failed</p>
                </div>
                <div class="stat-card">
                    <h3>{success_rate}%</h3>
                    <p>Success Rate</p>
                </div>
            </div>
            
            <div class="progress-bar">
                <div class="progress-fill" style="width: {success_rate}%;">
                    {success_rate}%
                </div>
            </div>
            
            <div class="test-results">
                {test_items}
            </div>
        </div>
        <div class="footer">
            Generated by TruthGPT Test Framework ‚Ä¢ {timestamp}
        </div>
    </div>
</body>
</html>
"""
    
    def generate_report(self, results: Dict[str, Any], output_path: str = "test_report.html"):
        """Generate HTML report from test results"""
        
        # Extract data
        total_tests = results.get('total_tests', 0)
        total_failures = results.get('total_failures', 0)
        total_errors = results.get('total_errors', 0)
        passed_tests = total_tests - total_failures - total_errors
        failed_tests = total_failures + total_errors
        success_rate = results.get('success_rate', 0)
        
        # Generate test items
        test_items = self._generate_test_items(results)
        
        # Replace template placeholders
        html = self.template.format(
            total_tests=total_tests,
            passed_tests=passed_tests,
            failed_tests=failed_tests,
            success_rate=f"{success_rate:.1f}",
            test_items=test_items,
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )
        
        # Write to file
        output_file = Path(output_path)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html)
        
        print(f"‚úÖ HTML report generated: {output_file}")
        return str(output_file)
    
    def _generate_test_items(self, results: Dict[str, Any]) -> str:
        """Generate HTML for individual test items"""
        items = []
        
        suite_results = results.get('suite_results', {})
        
        for file_name, file_results in suite_results.items():
            status_class = "status-passed" if file_results['success'] else "status-failed"
            status_text = "‚úÖ PASSED" if file_results['success'] else "‚ùå FAILED"
            
            item = f"""
            <div class="test-item">
                <div>
                    <span class="test-name">{file_name}</span>
                    <span style="color: #666; margin-left: 10px;">
                        {file_results['tests_run']} tests ‚Ä¢ {file_results['execution_time']:.2f}s
                    </span>
                </div>
                <span class="test-status {status_class}">{status_text}</span>
            </div>
            """
            items.append(item)
        
        return "\n".join(items) if items else "<p>No test results available</p>"


class TrendAnalyzer:
    """Analyze test trends over time"""
    
    def __init__(self, history_file: str = "test_history.json"):
        self.history_file = Path(history_file)
        self.history = self._load_history()
    
    def _load_history(self) -> List[Dict[str, Any]]:
        """Load test history"""
        if self.history_file.exists():
            with open(self.history_file, 'r') as f:
                return json.load(f)
        return []
    
    def save_result(self, results: Dict[str, Any]):
        """Save test result to history"""
        history_entry = {
            'timestamp': datetime.now().isoformat(),
            'results': results
        }
        
        self.history.append(history_entry)
        
        # Keep only last 100 runs
        if len(self.history) > 100:
            self.history = self.history[-100:]
        
        with open(self.history_file, 'w') as f:
            json.dump(self.history, f, indent=2)
    
    def get_trends(self) -> Dict[str, Any]:
        """Get trends over time"""
        if len(self.history) < 2:
            return {}
        
        trends = {
            'success_rate_trend': [],
            'execution_time_trend': [],
            'memory_usage_trend': []
        }
        
        for entry in self.history:
            results = entry['results']
            
            # Success rate trend
            trends['success_rate_trend'].append({
                'timestamp': entry['timestamp'],
                'value': results.get('success_rate', 0)
            })
            
            # Execution time trend
            if 'performance_metrics' in results:
                trends['execution_time_trend'].append({
                    'timestamp': entry['timestamp'],
                    'value': results['performance_metrics'].get('total_execution_time', 0)
                })
            
            # Memory usage trend
            if 'memory_summary' in results:
                trends['memory_usage_trend'].append({
                    'timestamp': entry['timestamp'],
                    'value': results['memory_summary'].get('peak_memory', 0)
                })
        
        return trends
    
    def print_trends(self):
        """Print trend analysis"""
        trends = self.get_trends()
        
        print("\nüìà Test Trends Analysis")
        print("=" * 60)
        
        if 'success_rate_trend' in trends and trends['success_rate_trend']:
            values = [t['value'] for t in trends['success_rate_trend']]
            print(f"\nSuccess Rate:")
            print(f"  First: {values[0]:.1f}%")
            print(f"  Last: {values[-1]:.1f}%")
            print(f"  Change: {values[-1] - values[0]:+.1f}%")
        
        if 'execution_time_trend' in trends and trends['execution_time_trend']:
            values = [t['value'] for t in trends['execution_time_trend']]
            print(f"\nExecution Time:")
            print(f"  First: {values[0]:.2f}s")
            print(f"  Last: {values[-1]:.2f}s")
            if len(values) > 0:
                print(f"  Change: {((values[-1] - values[0]) / values[0] * 100):+.1f}%")
        
        print("=" * 60)


