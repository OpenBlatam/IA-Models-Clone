# Onyx-Integrated Copywriting Service Requirements
# Production-ready dependencies with LangChain and OpenRouter integration

# === CORE FRAMEWORK ===
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
pydantic-settings==2.1.0

# === ONYX BACKEND INTEGRATION ===
# (These will be provided by the Onyx backend)
# sqlalchemy>=1.4.0
# alembic>=1.8.0
# psycopg2-binary>=2.9.0

# === AI & LANGCHAIN INTEGRATION ===
langchain==0.0.350              # Core LangChain framework
langchain-openai==0.0.2         # OpenAI integration
langchain-anthropic==0.0.1      # Anthropic integration
langchain-community==0.0.10     # Community integrations
openai==1.3.0                   # OpenAI API client
anthropic==0.7.0                # Anthropic API client

# === OPENROUTER SUPPORT ===
# OpenRouter uses OpenAI-compatible API, so openai package is sufficient
httpx==0.25.2                   # HTTP client for API calls
aiohttp==3.9.0                  # Async HTTP client

# === CRITICAL OPTIMIZATIONS ===
orjson==3.9.10                  # 5x faster JSON serialization
uvloop==0.19.0                  # 4x faster event loop (Unix only)
redis==5.0.1                    # Distributed caching
aioredis==2.0.1                 # Async Redis client

# === HIGH PRIORITY OPTIMIZATIONS ===
polars==0.20.0                  # 10x faster DataFrames
numba==0.58.1                   # 15x faster JIT compilation
xxhash==3.4.1                   # 4x faster hashing
lz4==4.3.2                     # 4x faster compression

# === MONITORING & METRICS ===
prometheus-fastapi-instrumentator==6.1.0  # Prometheus metrics
structlog==23.2.0               # Structured logging
psutil==5.9.6                   # System monitoring

# === MEDIUM PRIORITY OPTIMIZATIONS ===
ujson==5.8.0                    # 3x faster JSON (fallback)
msgspec==0.18.4                 # 8x faster binary serialization
pyarrow==14.0.1                 # Columnar data processing
hiredis==2.2.3                  # 2x faster Redis protocol

# === AI PROMPT MANAGEMENT ===
jinja2==3.1.2                   # Template engine for prompts
tiktoken==0.5.2                 # Token counting for OpenAI models
transformers==4.35.0            # Hugging Face transformers (optional)

# === ASYNC & CONCURRENCY ===
asyncio==3.4.3                  # Async programming
aiofiles==23.2.1                # Async file operations
asyncio-mqtt==0.16.1            # Async MQTT (for real-time features)

# === CACHING & STORAGE ===
diskcache==5.6.3                # Disk-based cache
cachetools==5.3.2               # Memory caching utilities

# === SECURITY ===
cryptography==41.0.7            # Cryptographic operations
bcrypt==4.1.1                   # Password hashing
python-jose[cryptography]==3.3.0  # JWT tokens

# === MIDDLEWARE & UTILITIES ===
slowapi==0.1.9                  # Rate limiting
python-multipart==0.0.6        # Form data parsing
python-dateutil==2.8.2         # Date utilities
pydantic-extra-types==2.1.0     # Additional Pydantic types

# === DEVELOPMENT & TESTING ===
pytest==7.4.3                   # Testing framework
pytest-asyncio==0.21.1          # Async testing
pytest-mock==3.12.0             # Mocking for tests
httpx==0.25.2                   # HTTP client for testing
factory-boy==3.3.0              # Test data factories

# === CODE QUALITY ===
black==23.11.0                  # Code formatting
ruff==0.1.6                     # Ultra-fast linting
mypy==1.7.1                     # Type checking
pre-commit==3.5.0               # Git hooks

# === DEPLOYMENT ===
gunicorn==21.2.0                # WSGI server
supervisor==4.2.5               # Process management

# === OPTIONAL AI PROVIDERS ===
# Uncomment based on your needs:
# google-generativeai==0.3.0    # Google Gemini
# cohere==4.39                   # Cohere API
# together==0.2.7                # Together AI
# replicate==0.18.0              # Replicate API

# === INSTALLATION PRIORITY ===
# 1. CRITICAL for Onyx integration:
#    pip install langchain langchain-openai openai anthropic
#
# 2. CRITICAL for performance:
#    pip install orjson uvloop redis aioredis
#
# 3. HIGH priority optimizations:
#    pip install polars numba xxhash lz4
#
# 4. MONITORING (production):
#    pip install prometheus-fastapi-instrumentator structlog
#
# 5. Install all:
#    pip install -r requirements_onyx.txt

# === ENVIRONMENT VARIABLES REQUIRED ===
# OPENROUTER_API_KEY=your_openrouter_key
# OPENAI_API_KEY=your_openai_key (optional, for direct OpenAI)
# ANTHROPIC_API_KEY=your_anthropic_key (optional)
# REDIS_URL=redis://localhost:6379/9
# ONYX_API_KEY=your_onyx_backend_key
# ONYX_BASE_URL=http://localhost:8080

# === SYSTEM REQUIREMENTS ===
# - Python 3.8+
# - Redis server (for caching)
# - PostgreSQL (for Onyx backend)
# - Build tools (gcc, etc.) for compiled extensions
# - For uvloop: Unix-like system (Linux, macOS)

# === AI PROVIDER SETUP ===
# OpenRouter: https://openrouter.ai/
# - Supports 100+ models from different providers
# - Single API for multiple AI models
# - Cost-effective and reliable
#
# OpenAI: https://platform.openai.com/
# - Direct integration with GPT models
# - High-quality outputs
#
# Anthropic: https://console.anthropic.com/
# - Claude models integration
# - Strong reasoning capabilities

# === PERFORMANCE NOTES ===
# Expected performance gains with full optimization:
# - JSON processing: 5x faster with orjson
# - Event loop: 4x faster with uvloop
# - Caching: 3x faster with Redis
# - AI responses: Cached for 1 hour
# - Total realistic speedup: 10-15x 