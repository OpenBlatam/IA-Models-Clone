# =============================================================================
# Production CI/CD Pipeline for Next-Level HeyGen AI FastAPI
# Automated testing, security scanning, and deployment to production
# =============================================================================

name: Production Deployment Pipeline

on:
  push:
    branches: [main, production]
    tags: ['v*']
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      optimization_tier:
        description: 'Optimization tier'
        required: false
        default: '3'
        type: choice
        options:
          - '1'
          - '2'
          - '3'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/heygen-ai
  DOCKER_BUILDKIT: 1

jobs:
  # =============================================================================
  # Code Quality & Security
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt

      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          black --check --diff .
          isort --check-only --diff .

      - name: Run type checking
        run: |
          mypy api/ core/ domain/ application/ infrastructure/ --ignore-missing-imports

      - name: Security scan with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt -o bandit-report.txt

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: bandit-report.*

  # =============================================================================
  # Unit & Integration Tests
  # =============================================================================
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_heygen_ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/test_heygen_ai
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET: test-jwt-secret
          OPENROUTER_API_KEY: test-api-key
        run: |
          pytest tests/unit/ -v --cov=api --cov=core --cov=domain --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/test_heygen_ai
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET: test-jwt-secret
          OPENROUTER_API_KEY: test-api-key
        run: |
          pytest tests/integration/ -v --cov=api --cov=core --cov=domain --cov-report=xml --cov-report=html

      - name: Run performance tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/test_heygen_ai
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET: test-jwt-secret
          OPENROUTER_API_KEY: test-api-key
        run: |
          pytest tests/performance/ -v --benchmark-only

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: htmlcov/ coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: .pytest_cache/ .benchmarks/

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # =============================================================================
  # Docker Image Build & Security
  # =============================================================================
  build:
    name: Build & Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            OPTIMIZATION_TIER=${{ github.event.inputs.optimization_tier || '3' }}
            ENABLE_GPU=true
            BUILD_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  # =============================================================================
  # Staging Deployment
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          # This could be deploying to a staging server or cloud environment

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add staging smoke test logic here

      - name: Notify staging deployment
        if: always()
        run: |
          echo "Staging deployment completed"
          # Add notification logic here (Slack, email, etc.)

  # =============================================================================
  # Production Deployment
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "Setting up production deployment environment..."
          # Add production environment setup logic here

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here
          # This could be deploying to cloud providers (AWS, GCP, Azure)

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add production health check logic here

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke test logic here

      - name: Notify production deployment
        if: always()
        run: |
          echo "Production deployment completed"
          # Add notification logic here (Slack, email, PagerDuty, etc.)

  # =============================================================================
  # Post-deployment Verification
  # =============================================================================
  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/production' || github.event.inputs.environment == 'production'
    steps:
      - name: Verify application health
        run: |
          echo "Verifying application health..."
          # Add health verification logic here

      - name: Verify monitoring
        run: |
          echo "Verifying monitoring stack..."
          # Add monitoring verification logic here

      - name: Verify security
        run: |
          echo "Verifying security measures..."
          # Add security verification logic here

      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          # Add deployment report generation logic here

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            deployment-report.json
            health-check-results.json
            monitoring-status.json

  # =============================================================================
  # Rollback (Manual Trigger)
  # =============================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Add rollback logic here

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add rollback verification logic here

      - name: Notify rollback
        if: always()
        run: |
          echo "Rollback completed"
          # Add rollback notification logic here 