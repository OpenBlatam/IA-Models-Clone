version: '3.8'

# =============================================================================
# Production Docker Compose for Next-Level HeyGen AI FastAPI
# Complete production stack with monitoring, load balancing, and security
# =============================================================================

services:
  # =============================================================================
  # Main Application Services
  # =============================================================================
  heygen-ai-app:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
      args:
        OPTIMIZATION_TIER: 3
        ENABLE_GPU: "true"
        BUILD_ENV: production
    image: heygen-ai:latest
    container_name: heygen-ai-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - OPTIMIZATION_TIER=3
      - PROFILING_LEVEL=1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://heygen:${DB_PASSWORD}@postgres:5432/heygen_ai
      - SENTRY_DSN=${SENTRY_DSN}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - LOG_LEVEL=info
      - MAX_CONCURRENT_REQUESTS=1000
      - WORKERS=4
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./cache:/app/cache
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heygen-ai.rule=Host(`api.heygen.local`)"
      - "traefik.http.routers.heygen-ai.tls=true"
      - "traefik.http.services.heygen-ai.loadbalancer.server.port=8000"

  # =============================================================================
  # Load Balancer and Reverse Proxy
  # =============================================================================
  traefik:
    image: traefik:v3.0
    container_name: heygen-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.heygen.local`)"

  # =============================================================================
  # Database Services
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: heygen-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: heygen_ai
      POSTGRES_USER: heygen
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U heygen -d heygen_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - heygen-network

  redis:
    image: redis:7-alpine
    container_name: heygen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - heygen-network

  # =============================================================================
  # Monitoring Stack
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: heygen-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.heygen.local`)"

  grafana:
    image: grafana/grafana:latest
    container_name: heygen-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.heygen.local`)"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: heygen-alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.heygen.local`)"

  # =============================================================================
  # Log Management
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: heygen-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - heygen-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: heygen-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - heygen-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.heygen.local`)"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: heygen-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - heygen-network

  # =============================================================================
  # Security and Backup Services
  # =============================================================================
  backup:
    image: postgres:16-alpine
    container_name: heygen-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: ["sh", "-c", "chmod +x /backup.sh && crond -f"]
    depends_on:
      - postgres
    networks:
      - heygen-network

  # =============================================================================
  # Development and Testing Services (Optional)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: heygen-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@heygen.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - heygen-network
    profiles:
      - development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.heygen.local`)"

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: heygen-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - heygen-network
    profiles:
      - development
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`redis.heygen.local`)"

# =============================================================================
# Networks
# =============================================================================
networks:
  heygen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

# =============================================================================
# Usage Instructions
# =============================================================================
#
# Production deployment:
# docker-compose -f docker-compose.production.yml up -d
#
# Development with additional services:
# docker-compose -f docker-compose.production.yml --profile development up -d
#
# Scale application:
# docker-compose -f docker-compose.production.yml up -d --scale heygen-ai-app=3
#
# View logs:
# docker-compose -f docker-compose.production.yml logs -f heygen-ai-app
#
# Stop all services:
# docker-compose -f docker-compose.production.yml down
#
# Remove all data (CAUTION):
# docker-compose -f docker-compose.production.yml down -v
# 