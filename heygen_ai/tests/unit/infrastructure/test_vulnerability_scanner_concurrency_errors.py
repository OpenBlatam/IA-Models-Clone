import asyncio
from unittest.mock import AsyncMock, patch

import pytest

from vulnerability_scanner import WebVulnerabilityScanner, VulnerabilityFinding


@pytest.mark.asyncio
async def test_scan_multiple_urls_concurrency_and_errors():
    scanner = WebVulnerabilityScanner(max_concurrent_scans=2, request_timeout=1.0)

    async def fake_scan(url: str):
        if "bad" in url:
            raise RuntimeError("boom")
        return [VulnerabilityFinding(
            vulnerability_type='info',
            severity_level=scanner.vulnerability_patterns['path_traversal']['severity'],
            description='ok',
            target_url=url,
        )]

    urls = ["http://ok1/", "http://bad/", "http://ok2/"]

    with patch.object(scanner, 'scan_single_url', side_effect=fake_scan):
        results = await scanner.scan_multiple_urls(urls)

    assert set(results.keys()) == set(urls)
    assert isinstance(results["http://ok1/"], list) and len(results["http://ok1/"]) == 1
    assert isinstance(results["http://ok2/"], list) and len(results["http://ok2/"]) == 1
    # Error path returns a list with a scan_error finding
    assert isinstance(results["http://bad/"], list) and results["http://bad/"][0].vulnerability_type in {"scan_error", "connection_error"}


