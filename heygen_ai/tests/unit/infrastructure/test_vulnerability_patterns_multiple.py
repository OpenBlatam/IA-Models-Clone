import pytest

from vulnerability_scanner import WebVulnerabilityScanner, VulnerabilitySeverity


@pytest.mark.asyncio
async def test_multiple_patterns_detected(monkeypatch):
    body = """
    <html>
      <script>alert(1)</script>
      UNION SELECT password FROM users --
      ../../etc/passwd
    </html>
    """

    class FakeResponse:
        headers = {}

        async def text(self):
            return body

        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

    class FakeSession:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

        def get(self, url):
            return FakeResponse()

    import vulnerability_scanner as mod
    monkeypatch.setattr(mod, "aiohttp", type("x", (), {"ClientSession": lambda timeout=None: FakeSession(), "ClientTimeout": lambda total: total}))

    scanner = WebVulnerabilityScanner()
    findings = await scanner.scan_single_url("http://site.test")

    types = {f.vulnerability_type for f in findings}
    assert {"cross_site_scripting", "sql_injection", "path_traversal", "http_usage"}.issubset(types)
    assert any(f.severity_level in (VulnerabilitySeverity.HIGH, VulnerabilitySeverity.CRITICAL) for f in findings)













