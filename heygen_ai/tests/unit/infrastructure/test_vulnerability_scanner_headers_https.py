import pytest

from vulnerability_scanner import WebVulnerabilityScanner, VulnerabilitySeverity


@pytest.mark.asyncio
async def test_scan_single_url_missing_and_weak_headers(monkeypatch):
    # Missing two headers, one weak value
    headers = {
        "X-Frame-Options": "ALLOW-FROM anywhere",  # weak
        "X-Content-Type-Options": "nosniff",  # good
        # Missing Strict-Transport-Security and Content-Security-Policy
    }

    class FakeResponse:
        def __init__(self, hdrs):
            self.headers = hdrs

        async def text(self):
            return "<html><body>Hello</body></html>"

        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

    class FakeSession:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

        def get(self, url):
            return FakeResponse(headers)

    import vulnerability_scanner as mod
    monkeypatch.setattr(mod, "aiohttp", type("x", (), {"ClientSession": lambda timeout=None: FakeSession(), "ClientTimeout": lambda total: total}))

    scanner = WebVulnerabilityScanner()
    findings = await scanner.scan_single_url("https://example.com")

    types = [f.vulnerability_type for f in findings]
    assert "missing_security_header" in types  # at least one missing
    assert any(f.vulnerability_type == "weak_security_header" for f in findings)


@pytest.mark.asyncio
async def test_scan_single_url_http_usage(monkeypatch):
    class FakeResponse:
        headers = {}

        async def text(self):
            return "OK"

        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

    class FakeSession:
        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

        def get(self, url):
            return FakeResponse()

    import vulnerability_scanner as mod
    monkeypatch.setattr(mod, "aiohttp", type("x", (), {"ClientSession": lambda timeout=None: FakeSession(), "ClientTimeout": lambda total: total}))

    scanner = WebVulnerabilityScanner()
    findings = await scanner.scan_single_url("http://insecure.test")
    assert any(f.vulnerability_type == "http_usage" and f.severity_level == VulnerabilitySeverity.HIGH for f in findings)


