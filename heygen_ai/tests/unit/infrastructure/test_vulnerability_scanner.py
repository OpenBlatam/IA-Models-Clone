import pytest

from vulnerability_scanner import (
    WebVulnerabilityScanner,
    VulnerabilityFinding,
    VulnerabilitySeverity,
)


@pytest.mark.asyncio
async def test_scan_single_url_patterns_and_headers(monkeypatch):
    class FakeResponse:
        def __init__(self, text, headers):
            self._text = text
            self.headers = headers

        async def text(self):
            return self._text

        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

    class FakeSession:
        def __init__(self, *_, **__):
            pass

        async def __aenter__(self):
            return self

        async def __aexit__(self, exc_type, exc, tb):
            return False

        def get(self, url):
            content = "<html><script>alert('xss')</script></html>"
            headers = {"X-Content-Type-Options": "nosniff"}  # Missing several others
            return FakeResponse(content, headers)

    import vulnerability_scanner as mod
    monkeypatch.setattr(mod, "aiohttp", type("x", (), {"ClientSession": FakeSession, "ClientTimeout": lambda total: total}))

    scanner = WebVulnerabilityScanner(max_concurrent_scans=1, request_timeout=1.0)
    findings = await scanner.scan_single_url("https://example.com")

    # Expect at least an XSS pattern finding and some header findings
    assert any(f.vulnerability_type == "cross_site_scripting" for f in findings)
    assert any(f.vulnerability_type in {"missing_security_header", "weak_security_header"} for f in findings)


@pytest.mark.asyncio
async def test_check_https_usage_detects_http():
    scanner = WebVulnerabilityScanner()
    findings = await scanner._check_https_usage("http://insecure.example.com")
    assert len(findings) == 1
    assert findings[0].vulnerability_type == "http_usage"
    assert findings[0].severity_level == VulnerabilitySeverity.HIGH



