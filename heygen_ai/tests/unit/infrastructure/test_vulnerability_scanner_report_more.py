from vulnerability_scanner import WebVulnerabilityScanner, VulnerabilityFinding, VulnerabilitySeverity


def test_generate_scan_report_shape_and_recommendations():
    scanner = WebVulnerabilityScanner()
    findings = {
        'http://xss/': [
            VulnerabilityFinding(
                vulnerability_type='cross_site_scripting',
                severity_level=VulnerabilitySeverity.HIGH,
                description='xss',
                target_url='http://xss/',
                is_exploitable=True,
            )
        ],
        'http://http-only/': [
            VulnerabilityFinding(
                vulnerability_type='http_usage',
                severity_level=VulnerabilitySeverity.HIGH,
                description='http',
                target_url='http://http-only/',
                is_exploitable=False,
            )
        ],
        'http://headers/': [
            VulnerabilityFinding(
                vulnerability_type='missing_security_header',
                severity_level=VulnerabilitySeverity.MEDIUM,
                description='missing header',
                target_url='http://headers/',
            )
        ],
    }

    report = scanner.generate_scan_report(findings)
    assert 'total_targets_scanned' in report and report['total_targets_scanned'] == 3
    assert 'total_vulnerabilities_found' in report and report['total_vulnerabilities_found'] == 3
    assert 'severity_distribution' in report and report['severity_distribution']['high'] >= 1
    assert 'vulnerability_type_distribution' in report and report['vulnerability_type_distribution']['cross_site_scripting'] == 1
    assert isinstance(report.get('recommendations'), list) and len(report['recommendations']) >= 1
    # nested alias still present
    assert 'scan_summary' in report and report['scan_summary']['total_targets_scanned'] == 3


