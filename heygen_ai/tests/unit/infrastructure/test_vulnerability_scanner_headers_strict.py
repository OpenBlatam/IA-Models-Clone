import asyncio
from unittest.mock import patch

import pytest

from vulnerability_scanner import WebVulnerabilityScanner, VulnerabilityFinding


@pytest.mark.asyncio
async def test_security_headers_strict_validation_all_good():
    scanner = WebVulnerabilityScanner()
    headers = {
        'X-Frame-Options': 'DENY',
        'X-Content-Type-Options': 'nosniff',
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'Content-Security-Policy': "default-src 'self'",
    }
    with patch.object(scanner, '_check_security_headers', return_value=[]) as mock_check:
        findings = await scanner._check_security_headers('http://secure.test/', headers)
    assert isinstance(findings, list)
    assert findings == []


@pytest.mark.asyncio
async def test_security_headers_strict_validation_missing_some():
    scanner = WebVulnerabilityScanner()
    headers = {
        'X-Frame-Options': 'SAMEORIGIN',  # acceptable
        # Missing X-Content-Type-Options
        'Strict-Transport-Security': 'max-age=10',  # weak value
        # Missing CSP
    }
    # call real method
    findings = await scanner._check_security_headers('http://insecure.test/', headers)
    assert any(f.vulnerability_type in {"missing_security_header", "weak_security_header"} for f in findings)


