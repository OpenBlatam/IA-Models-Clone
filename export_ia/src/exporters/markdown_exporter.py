"""
Markdown export handler.
"""

from typing import Dict, Any
from datetime import datetime

from .base import BaseExporter


class MarkdownExporter(BaseExporter):
    """Markdown export handler with clean formatting."""
    
    def get_supported_features(self) -> list:
        """Get supported Markdown features."""
        return [
            "Version control friendly",
            "Lightweight",
            "Platform agnostic",
            "Easy to edit",
            "GitHub compatible",
            "Plain text based"
        ]
    
    async def export(
        self, 
        content: Dict[str, Any], 
        config: Any, 
        output_path: str
    ) -> Dict[str, Any]:
        """Export content to Markdown format."""
        try:
            # Preprocess content
            processed_content = self.preprocess_content(content)
            
            markdown_content = []
            
            # Title
            if "title" in processed_content:
                markdown_content.append(f"# {processed_content['title']}\n")
            
            # Content sections
            if "sections" in processed_content:
                for section in processed_content["sections"]:
                    if "heading" in section:
                        markdown_content.append(f"## {section['heading']}\n")
                    
                    if "content" in section:
                        markdown_content.append(f"{section['content']}\n")
            
            # Add metadata
            markdown_content.append(f"\n---\n")
            markdown_content.append(f"*Generated by Export IA - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(markdown_content))
            
            result = {
                "format": "markdown",
                "sections": len(processed_content.get("sections", [])),
                "professional_features": {
                    "markdown_formatting": True,
                    "version_control_friendly": True
                }
            }
            
            return self.postprocess_result(result)
            
        except Exception as e:
            self.logger.error(f"Markdown export failed: {e}")
            raise
    
    def postprocess_result(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """Postprocess Markdown export result."""
        result["file_type"] = "text/markdown"
        result["mime_type"] = "text/markdown"
        return result




