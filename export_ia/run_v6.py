"""
Export IA V6.0 - ULTIMATE ENTERPRISE SYSTEM + IoT + QUANTUM
Script principal para ejecutar el sistema completo con IoT y Computaci√≥n Cu√°ntica
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('export_ia_v6.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


async def main():
    """Funci√≥n principal."""
    try:
        logger.info("üöÄ Iniciando Export IA V6.0 - ULTIMATE ENTERPRISE SYSTEM + IoT + QUANTUM")
        
        # Importar y ejecutar la aplicaci√≥n
        from app.api.enhanced_app_v6 import app
        import uvicorn
        
        # Configuraci√≥n del servidor
        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info",
            access_log=True,
            use_colors=True
        )
        
        server = uvicorn.Server(config)
        
        logger.info("üåü Sistema Export IA V6.0 iniciado exitosamente")
        logger.info("üì° Servidor disponible en: http://localhost:8000")
        logger.info("üìö Documentaci√≥n disponible en: http://localhost:8000/docs")
        logger.info("üîß ReDoc disponible en: http://localhost:8000/redoc")
        logger.info("üåê IoT Dashboard disponible en: http://localhost:8000/api/v1/iot")
        logger.info("‚öõÔ∏è Quantum Dashboard disponible en: http://localhost:8000/api/v1/quantum")
        
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üõë Sistema detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar el sistema: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())




