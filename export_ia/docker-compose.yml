version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://export_ia:password@postgres:5432/export_ia
      - REDIS_URL=redis://redis:6379/0
      - CONSUL_URL=http://consul:8500
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Export Service
  export-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - SERVICE_NAME=export-service
      - SERVICE_PORT=8001
      - DATABASE_URL=postgresql://export_ia:password@postgres:5432/export_ia
      - REDIS_URL=redis://redis:6379/0
      - CONSUL_URL=http://consul:8500
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Quality Service
  quality-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - SERVICE_NAME=quality-service
      - SERVICE_PORT=8002
      - DATABASE_URL=postgresql://export_ia:password@postgres:5432/export_ia
      - REDIS_URL=redis://redis:6379/0
      - CONSUL_URL=http://consul:8500
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Task Service
  task-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    environment:
      - SERVICE_NAME=task-service
      - SERVICE_PORT=8003
      - DATABASE_URL=postgresql://export_ia:password@postgres:5432/export_ia
      - REDIS_URL=redis://redis:6379/0
      - CONSUL_URL=http://consul:8500
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=export_ia
      - POSTGRES_USER=export_ia
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U export_ia"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consul Service Discovery
  consul:
    image: consul:1.16
    command: consul agent -server -bootstrap-expect=1 -client=0.0.0.0 -ui -bind=0.0.0.0
    ports:
      - "8500:8500"
    volumes:
      - consul_data:/consul/data
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - export-ia-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - export-ia-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - export-ia-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - export-ia-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - export-ia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  consul_data:
  prometheus_data:
  grafana_data:
  minio_data:

networks:
  export-ia-network:
    driver: bridge




